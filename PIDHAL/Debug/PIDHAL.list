
PIDHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d34  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fe0  08003fe0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fe0  08003fe0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08004058  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004058  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae8c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6e  00000000  00000000  0002af25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  0002cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  0002d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4fd  00000000  00000000  0002e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2bd  00000000  00000000  0004892d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bde  00000000  00000000  00055bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef7c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c9c  00000000  00000000  000ef818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003f00 	.word	0x08003f00

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003f00 	.word	0x08003f00

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fba6 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f80e 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f926 	bl	8000480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000234:	f000 f8fe 	bl	8000434 <MX_DMA_Init>
  MX_TIM1_Init();
 8000238:	f000 f84e 	bl	80002d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800023c:	f000 f8d0 	bl	80003e0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Hello");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <main+0x24>)
 8000242:	f002 fec9 	bl	8002fd8 <iprintf>
 8000246:	e7fb      	b.n	8000240 <main+0x1c>
 8000248:	08003f18 	.word	0x08003f18

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 feb4 	bl	8002fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fa67 	bl	8001768 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 f924 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fcd4 	bl	8001c6c <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 f90f 	bl	80004ec <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	; 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b092      	sub	sp, #72	; 0x48
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2220      	movs	r2, #32
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fe60 	bl	8002fc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000308:	4b33      	ldr	r3, [pc, #204]	; (80003d8 <MX_TIM1_Init+0x100>)
 800030a:	4a34      	ldr	r2, [pc, #208]	; (80003dc <MX_TIM1_Init+0x104>)
 800030c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800030e:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000314:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <MX_TIM1_Init+0x100>)
 800031c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000322:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000328:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_TIM1_Init+0x100>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000334:	4828      	ldr	r0, [pc, #160]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000336:	f001 fe31 	bl	8001f9c <HAL_TIM_PWM_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000340:	f000 f8d4 	bl	80004ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000344:	2300      	movs	r3, #0
 8000346:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000348:	2300      	movs	r3, #0
 800034a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800034c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000350:	4619      	mov	r1, r3
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000354:	f002 f956 	bl	8002604 <HAL_TIMEx_MasterConfigSynchronization>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800035e:	f000 f8c5 	bl	80004ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000362:	2360      	movs	r3, #96	; 0x60
 8000364:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036a:	2300      	movs	r3, #0
 800036c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800036e:	2300      	movs	r3, #0
 8000370:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000376:	2300      	movs	r3, #0
 8000378:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000382:	2200      	movs	r2, #0
 8000384:	4619      	mov	r1, r3
 8000386:	4814      	ldr	r0, [pc, #80]	; (80003d8 <MX_TIM1_Init+0x100>)
 8000388:	f001 fe58 	bl	800203c <HAL_TIM_PWM_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000392:	f000 f8ab 	bl	80004ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <MX_TIM1_Init+0x100>)
 80003ba:	f002 f98f 	bl	80026dc <HAL_TIMEx_ConfigBreakDeadTime>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80003c4:	f000 f892 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <MX_TIM1_Init+0x100>)
 80003ca:	f000 f8e5 	bl	8000598 <HAL_TIM_MspPostInit>

}
 80003ce:	bf00      	nop
 80003d0:	3748      	adds	r7, #72	; 0x48
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	2000008c 	.word	0x2000008c
 80003dc:	40012c00 	.word	0x40012c00

080003e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <MX_USART1_UART_Init+0x50>)
 80003e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_USART1_UART_Init+0x4c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000406:	220c      	movs	r2, #12
 8000408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_USART1_UART_Init+0x4c>)
 8000418:	f002 f9b1 	bl	800277e <HAL_UART_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000422:	f000 f863 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000d4 	.word	0x200000d4
 8000430:	40013800 	.word	0x40013800

08000434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_DMA_Init+0x48>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a0f      	ldr	r2, [pc, #60]	; (800047c <MX_DMA_Init+0x48>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <MX_DMA_Init+0x48>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2100      	movs	r1, #0
 8000456:	200e      	movs	r0, #14
 8000458:	f000 fbc7 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800045c:	200e      	movs	r0, #14
 800045e:	f000 fbe0 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	200f      	movs	r0, #15
 8000468:	f000 fbbf 	bl	8000bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800046c:	200f      	movs	r0, #15
 800046e:	f000 fbd8 	bl	8000c22 <HAL_NVIC_EnableIRQ>

}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_GPIO_Init+0x64>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_GPIO_Init+0x64>)
 800049a:	f043 0320 	orr.w	r3, r3, #32
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_GPIO_Init+0x64>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	607b      	str	r3, [r7, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_GPIO_Init+0x64>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <MX_GPIO_Init+0x64>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <MX_GPIO_Init+0x64>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004c4:	23c0      	movs	r3, #192	; 0xc0
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4619      	mov	r1, r3
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0x68>)
 80004d8:	f000 ffb2 	bl	8001440 <HAL_GPIO_Init>

}
 80004dc:	bf00      	nop
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a14      	ldr	r2, [pc, #80]	; (8000554 <HAL_MspInit+0x5c>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_MspInit+0x5c>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x60>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_MspInit+0x60>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <HAL_TIM_PWM_MspInit+0x34>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d10b      	bne.n	8000586 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_TIM_PWM_MspInit+0x38>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <HAL_TIM_PWM_MspInit+0x38>)
 8000574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_TIM_PWM_MspInit+0x38>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	40012c00 	.word	0x40012c00
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <HAL_TIM_MspPostInit+0x5c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d118      	bne.n	80005ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_TIM_MspPostInit+0x60>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <HAL_TIM_MspPostInit+0x60>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_TIM_MspPostInit+0x60>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED0_Pin;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2303      	movs	r3, #3
 80005dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <HAL_TIM_MspPostInit+0x64>)
 80005e6:	f000 ff2b 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40012c00 	.word	0x40012c00
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800

08000600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a47      	ldr	r2, [pc, #284]	; (8000738 <HAL_UART_MspInit+0x138>)
 800061c:	4293      	cmp	r3, r2
 800061e:	f040 8086 	bne.w	800072e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000622:	4b46      	ldr	r3, [pc, #280]	; (800073c <HAL_UART_MspInit+0x13c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a45      	ldr	r2, [pc, #276]	; (800073c <HAL_UART_MspInit+0x13c>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b43      	ldr	r3, [pc, #268]	; (800073c <HAL_UART_MspInit+0x13c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b40      	ldr	r3, [pc, #256]	; (800073c <HAL_UART_MspInit+0x13c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a3f      	ldr	r2, [pc, #252]	; (800073c <HAL_UART_MspInit+0x13c>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <HAL_UART_MspInit+0x13c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4836      	ldr	r0, [pc, #216]	; (8000740 <HAL_UART_MspInit+0x140>)
 8000668:	f000 feea 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800066c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	482f      	ldr	r0, [pc, #188]	; (8000740 <HAL_UART_MspInit+0x140>)
 8000682:	f000 fedd 	bl	8001440 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <HAL_UART_MspInit+0x144>)
 8000688:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <HAL_UART_MspInit+0x148>)
 800068a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <HAL_UART_MspInit+0x144>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <HAL_UART_MspInit+0x144>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <HAL_UART_MspInit+0x144>)
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006b6:	4823      	ldr	r0, [pc, #140]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006b8:	f000 face 	bl	8000c58 <HAL_DMA_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80006c2:	f7ff ff13 	bl	80004ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a1e      	ldr	r2, [pc, #120]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006ca:	639a      	str	r2, [r3, #56]	; 0x38
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <HAL_UART_MspInit+0x144>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006d4:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <HAL_UART_MspInit+0x150>)
 80006d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006da:	2210      	movs	r2, #16
 80006dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_UART_MspInit+0x14c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000702:	4812      	ldr	r0, [pc, #72]	; (800074c <HAL_UART_MspInit+0x14c>)
 8000704:	f000 faa8 	bl	8000c58 <HAL_DMA_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800070e:	f7ff feed 	bl	80004ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <HAL_UART_MspInit+0x14c>)
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <HAL_UART_MspInit+0x14c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2025      	movs	r0, #37	; 0x25
 8000724:	f000 fa61 	bl	8000bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000728:	2025      	movs	r0, #37	; 0x25
 800072a:	f000 fa7a 	bl	8000c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40013800 	.word	0x40013800
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800
 8000744:	20000118 	.word	0x20000118
 8000748:	40020058 	.word	0x40020058
 800074c:	2000015c 	.word	0x2000015c
 8000750:	40020044 	.word	0x40020044

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f933 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <DMA1_Channel4_IRQHandler+0x10>)
 80007aa:	f000 fc0d 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000015c 	.word	0x2000015c

080007b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <DMA1_Channel5_IRQHandler+0x10>)
 80007be:	f000 fc03 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000118 	.word	0x20000118

080007cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <USART1_IRQHandler+0x10>)
 80007d2:	f002 f821 	bl	8002818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000d4 	.word	0x200000d4

080007e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00a      	b.n	8000808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f2:	f3af 8000 	nop.w
 80007f6:	4601      	mov	r1, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf0      	blt.n	80007f2 <_read+0x12>
  }

  return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e009      	b.n	8000840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf1      	blt.n	800082c <_write+0x12>
  }
  return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000878:	605a      	str	r2, [r3, #4]
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_isatty>:

int _isatty(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f002 fb46 	bl	8002f74 <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000c000 	.word	0x2000c000
 8000914:	00000400 	.word	0x00000400
 8000918:	200001a0 	.word	0x200001a0
 800091c:	200001b8 	.word	0x200001b8

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f7ff ffe5 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f002 fb13 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fc63 	bl	8000224 <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000968:	08003fe8 	.word	0x08003fe8
  ldr r2, =_sbss
 800096c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000970:	200001b8 	.word	0x200001b8

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f923 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fdb0 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f93b 	bl	8000c3e <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f903 	bl	8000bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	200001a4 	.word	0x200001a4

08000a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	200001a4 	.word	0x200001a4

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <__NVIC_EnableIRQ+0x34>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff90 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff2d 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff42 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff90 	bl	8000b2c <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5f 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff35 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffa2 	bl	8000b90 <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e059      	b.n	8000d22 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_DMA_Init+0xd4>)
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d80f      	bhi.n	8000c9a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <HAL_DMA_Init+0xd8>)
 8000c82:	4413      	add	r3, r2
 8000c84:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <HAL_DMA_Init+0xdc>)
 8000c86:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	009a      	lsls	r2, r3, #2
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <HAL_DMA_Init+0xe0>)
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c98:	e00e      	b.n	8000cb8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <HAL_DMA_Init+0xe4>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <HAL_DMA_Init+0xdc>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	009a      	lsls	r2, r3, #2
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <HAL_DMA_Init+0xe8>)
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40020407 	.word	0x40020407
 8000d30:	bffdfff8 	.word	0xbffdfff8
 8000d34:	cccccccd 	.word	0xcccccccd
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	bffdfbf8 	.word	0xbffdfbf8
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d008      	beq.n	8000d6c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e020      	b.n	8000dae <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 020e 	bic.w	r2, r2, #14
 8000d7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0201 	bic.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d005      	beq.n	8000dda <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e0d6      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 020e 	bic.w	r2, r2, #14
 8000de8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0201 	bic.w	r2, r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <HAL_DMA_Abort_IT+0x1dc>)
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d958      	bls.n	8000eb8 <HAL_DMA_Abort_IT+0x100>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a63      	ldr	r2, [pc, #396]	; (8000f98 <HAL_DMA_Abort_IT+0x1e0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d04f      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0xf8>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a61      	ldr	r2, [pc, #388]	; (8000f9c <HAL_DMA_Abort_IT+0x1e4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d048      	beq.n	8000eac <HAL_DMA_Abort_IT+0xf4>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a60      	ldr	r2, [pc, #384]	; (8000fa0 <HAL_DMA_Abort_IT+0x1e8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d040      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0xee>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a5e      	ldr	r2, [pc, #376]	; (8000fa4 <HAL_DMA_Abort_IT+0x1ec>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d038      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0xe8>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a5d      	ldr	r2, [pc, #372]	; (8000fa8 <HAL_DMA_Abort_IT+0x1f0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d030      	beq.n	8000e9a <HAL_DMA_Abort_IT+0xe2>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a5b      	ldr	r2, [pc, #364]	; (8000fac <HAL_DMA_Abort_IT+0x1f4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d028      	beq.n	8000e94 <HAL_DMA_Abort_IT+0xdc>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a53      	ldr	r2, [pc, #332]	; (8000f94 <HAL_DMA_Abort_IT+0x1dc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d020      	beq.n	8000e8e <HAL_DMA_Abort_IT+0xd6>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a57      	ldr	r2, [pc, #348]	; (8000fb0 <HAL_DMA_Abort_IT+0x1f8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d019      	beq.n	8000e8a <HAL_DMA_Abort_IT+0xd2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a56      	ldr	r2, [pc, #344]	; (8000fb4 <HAL_DMA_Abort_IT+0x1fc>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d012      	beq.n	8000e86 <HAL_DMA_Abort_IT+0xce>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a54      	ldr	r2, [pc, #336]	; (8000fb8 <HAL_DMA_Abort_IT+0x200>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00a      	beq.n	8000e80 <HAL_DMA_Abort_IT+0xc8>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a53      	ldr	r2, [pc, #332]	; (8000fbc <HAL_DMA_Abort_IT+0x204>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d102      	bne.n	8000e7a <HAL_DMA_Abort_IT+0xc2>
 8000e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e78:	e01b      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7e:	e018      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e84:	e015      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e86:	2310      	movs	r3, #16
 8000e88:	e013      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e011      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e92:	e00e      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e98:	e00b      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9e:	e008      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	e005      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eaa:	e002      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000eac:	2310      	movs	r3, #16
 8000eae:	e000      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xfa>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4a43      	ldr	r2, [pc, #268]	; (8000fc0 <HAL_DMA_Abort_IT+0x208>)
 8000eb4:	6053      	str	r3, [r2, #4]
 8000eb6:	e057      	b.n	8000f68 <HAL_DMA_Abort_IT+0x1b0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <HAL_DMA_Abort_IT+0x1e0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d04f      	beq.n	8000f62 <HAL_DMA_Abort_IT+0x1aa>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <HAL_DMA_Abort_IT+0x1e4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d048      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x1a6>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_DMA_Abort_IT+0x1e8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d040      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x1a0>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <HAL_DMA_Abort_IT+0x1ec>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d038      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x19a>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <HAL_DMA_Abort_IT+0x1f0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d030      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x194>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_DMA_Abort_IT+0x1f4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d028      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x18e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_DMA_Abort_IT+0x1dc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d020      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x188>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <HAL_DMA_Abort_IT+0x1f8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d019      	beq.n	8000f3c <HAL_DMA_Abort_IT+0x184>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_DMA_Abort_IT+0x1fc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d012      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x180>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <HAL_DMA_Abort_IT+0x200>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00a      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x17a>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <HAL_DMA_Abort_IT+0x204>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d102      	bne.n	8000f2c <HAL_DMA_Abort_IT+0x174>
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	e01b      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f30:	e018      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	e015      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f38:	2310      	movs	r3, #16
 8000f3a:	e013      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e011      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f44:	e00e      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f4a:	e00b      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	e008      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	e005      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	e002      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f5e:	2310      	movs	r3, #16
 8000f60:	e000      	b.n	8000f64 <HAL_DMA_Abort_IT+0x1ac>
 8000f62:	2301      	movs	r3, #1
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_DMA_Abort_IT+0x20c>)
 8000f66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
    } 
  }
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020080 	.word	0x40020080
 8000f98:	40020008 	.word	0x40020008
 8000f9c:	4002001c 	.word	0x4002001c
 8000fa0:	40020030 	.word	0x40020030
 8000fa4:	40020044 	.word	0x40020044
 8000fa8:	40020058 	.word	0x40020058
 8000fac:	4002006c 	.word	0x4002006c
 8000fb0:	40020408 	.word	0x40020408
 8000fb4:	4002041c 	.word	0x4002041c
 8000fb8:	40020430 	.word	0x40020430
 8000fbc:	40020444 	.word	0x40020444
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80f1 	beq.w	80011d4 <HAL_DMA_IRQHandler+0x20c>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80eb 	beq.w	80011d4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0204 	bic.w	r2, r2, #4
 800101a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <HAL_DMA_IRQHandler+0x1d8>)
 8001024:	429a      	cmp	r2, r3
 8001026:	d958      	bls.n	80010da <HAL_DMA_IRQHandler+0x112>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a5d      	ldr	r2, [pc, #372]	; (80011a4 <HAL_DMA_IRQHandler+0x1dc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d04f      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x10a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a5c      	ldr	r2, [pc, #368]	; (80011a8 <HAL_DMA_IRQHandler+0x1e0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d048      	beq.n	80010ce <HAL_DMA_IRQHandler+0x106>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <HAL_DMA_IRQHandler+0x1e4>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d040      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x100>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a59      	ldr	r2, [pc, #356]	; (80011b0 <HAL_DMA_IRQHandler+0x1e8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d038      	beq.n	80010c2 <HAL_DMA_IRQHandler+0xfa>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <HAL_DMA_IRQHandler+0x1ec>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d030      	beq.n	80010bc <HAL_DMA_IRQHandler+0xf4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a56      	ldr	r2, [pc, #344]	; (80011b8 <HAL_DMA_IRQHandler+0x1f0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d028      	beq.n	80010b6 <HAL_DMA_IRQHandler+0xee>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a4d      	ldr	r2, [pc, #308]	; (80011a0 <HAL_DMA_IRQHandler+0x1d8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d020      	beq.n	80010b0 <HAL_DMA_IRQHandler+0xe8>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a52      	ldr	r2, [pc, #328]	; (80011bc <HAL_DMA_IRQHandler+0x1f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d019      	beq.n	80010ac <HAL_DMA_IRQHandler+0xe4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_DMA_IRQHandler+0x1f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d012      	beq.n	80010a8 <HAL_DMA_IRQHandler+0xe0>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_DMA_IRQHandler+0x1fc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d00a      	beq.n	80010a2 <HAL_DMA_IRQHandler+0xda>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_DMA_IRQHandler+0x200>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d102      	bne.n	800109c <HAL_DMA_IRQHandler+0xd4>
 8001096:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109a:	e01b      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 800109c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010a0:	e018      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	e015      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	e013      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e011      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010b4:	e00e      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ba:	e00b      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010c0:	e008      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c6:	e005      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010cc:	e002      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	e000      	b.n	80010d4 <HAL_DMA_IRQHandler+0x10c>
 80010d2:	2304      	movs	r3, #4
 80010d4:	4a3d      	ldr	r2, [pc, #244]	; (80011cc <HAL_DMA_IRQHandler+0x204>)
 80010d6:	6053      	str	r3, [r2, #4]
 80010d8:	e057      	b.n	800118a <HAL_DMA_IRQHandler+0x1c2>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <HAL_DMA_IRQHandler+0x1dc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d04f      	beq.n	8001184 <HAL_DMA_IRQHandler+0x1bc>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_DMA_IRQHandler+0x1e0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d048      	beq.n	8001180 <HAL_DMA_IRQHandler+0x1b8>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_DMA_IRQHandler+0x1e4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d040      	beq.n	800117a <HAL_DMA_IRQHandler+0x1b2>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a2c      	ldr	r2, [pc, #176]	; (80011b0 <HAL_DMA_IRQHandler+0x1e8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d038      	beq.n	8001174 <HAL_DMA_IRQHandler+0x1ac>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <HAL_DMA_IRQHandler+0x1ec>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d030      	beq.n	800116e <HAL_DMA_IRQHandler+0x1a6>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_DMA_IRQHandler+0x1f0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d028      	beq.n	8001168 <HAL_DMA_IRQHandler+0x1a0>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <HAL_DMA_IRQHandler+0x1d8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d020      	beq.n	8001162 <HAL_DMA_IRQHandler+0x19a>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_DMA_IRQHandler+0x1f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_DMA_IRQHandler+0x196>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a24      	ldr	r2, [pc, #144]	; (80011c0 <HAL_DMA_IRQHandler+0x1f8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d012      	beq.n	800115a <HAL_DMA_IRQHandler+0x192>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <HAL_DMA_IRQHandler+0x1fc>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00a      	beq.n	8001154 <HAL_DMA_IRQHandler+0x18c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <HAL_DMA_IRQHandler+0x200>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d102      	bne.n	800114e <HAL_DMA_IRQHandler+0x186>
 8001148:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800114c:	e01b      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 800114e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001152:	e018      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 8001154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001158:	e015      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 800115a:	2340      	movs	r3, #64	; 0x40
 800115c:	e013      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 800115e:	2304      	movs	r3, #4
 8001160:	e011      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 8001162:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001166:	e00e      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 8001168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800116c:	e00b      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 800116e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001172:	e008      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 8001174:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001178:	e005      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 800117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800117e:	e002      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	e000      	b.n	8001186 <HAL_DMA_IRQHandler+0x1be>
 8001184:	2304      	movs	r3, #4
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_DMA_IRQHandler+0x208>)
 8001188:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8136 	beq.w	8001400 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800119c:	e130      	b.n	8001400 <HAL_DMA_IRQHandler+0x438>
 800119e:	bf00      	nop
 80011a0:	40020080 	.word	0x40020080
 80011a4:	40020008 	.word	0x40020008
 80011a8:	4002001c 	.word	0x4002001c
 80011ac:	40020030 	.word	0x40020030
 80011b0:	40020044 	.word	0x40020044
 80011b4:	40020058 	.word	0x40020058
 80011b8:	4002006c 	.word	0x4002006c
 80011bc:	40020408 	.word	0x40020408
 80011c0:	4002041c 	.word	0x4002041c
 80011c4:	40020430 	.word	0x40020430
 80011c8:	40020444 	.word	0x40020444
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	2202      	movs	r2, #2
 80011da:	409a      	lsls	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80dd 	beq.w	80013a0 <HAL_DMA_IRQHandler+0x3d8>
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80d7 	beq.w	80013a0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10b      	bne.n	8001218 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 020a 	bic.w	r2, r2, #10
 800120e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b7b      	ldr	r3, [pc, #492]	; (800140c <HAL_DMA_IRQHandler+0x444>)
 8001220:	429a      	cmp	r2, r3
 8001222:	d958      	bls.n	80012d6 <HAL_DMA_IRQHandler+0x30e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a79      	ldr	r2, [pc, #484]	; (8001410 <HAL_DMA_IRQHandler+0x448>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d04f      	beq.n	80012ce <HAL_DMA_IRQHandler+0x306>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a78      	ldr	r2, [pc, #480]	; (8001414 <HAL_DMA_IRQHandler+0x44c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d048      	beq.n	80012ca <HAL_DMA_IRQHandler+0x302>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a76      	ldr	r2, [pc, #472]	; (8001418 <HAL_DMA_IRQHandler+0x450>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d040      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x2fc>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_DMA_IRQHandler+0x454>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d038      	beq.n	80012be <HAL_DMA_IRQHandler+0x2f6>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a73      	ldr	r2, [pc, #460]	; (8001420 <HAL_DMA_IRQHandler+0x458>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d030      	beq.n	80012b8 <HAL_DMA_IRQHandler+0x2f0>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a72      	ldr	r2, [pc, #456]	; (8001424 <HAL_DMA_IRQHandler+0x45c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d028      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x2ea>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a69      	ldr	r2, [pc, #420]	; (800140c <HAL_DMA_IRQHandler+0x444>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d020      	beq.n	80012ac <HAL_DMA_IRQHandler+0x2e4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <HAL_DMA_IRQHandler+0x460>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d019      	beq.n	80012a8 <HAL_DMA_IRQHandler+0x2e0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a6c      	ldr	r2, [pc, #432]	; (800142c <HAL_DMA_IRQHandler+0x464>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d012      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x2dc>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6b      	ldr	r2, [pc, #428]	; (8001430 <HAL_DMA_IRQHandler+0x468>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00a      	beq.n	800129e <HAL_DMA_IRQHandler+0x2d6>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a69      	ldr	r2, [pc, #420]	; (8001434 <HAL_DMA_IRQHandler+0x46c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d102      	bne.n	8001298 <HAL_DMA_IRQHandler+0x2d0>
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	e01b      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 8001298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129c:	e018      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 800129e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a2:	e015      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012a4:	2320      	movs	r3, #32
 80012a6:	e013      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e011      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b0:	e00e      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012b6:	e00b      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012bc:	e008      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c2:	e005      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	e002      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012ca:	2320      	movs	r3, #32
 80012cc:	e000      	b.n	80012d0 <HAL_DMA_IRQHandler+0x308>
 80012ce:	2302      	movs	r3, #2
 80012d0:	4a59      	ldr	r2, [pc, #356]	; (8001438 <HAL_DMA_IRQHandler+0x470>)
 80012d2:	6053      	str	r3, [r2, #4]
 80012d4:	e057      	b.n	8001386 <HAL_DMA_IRQHandler+0x3be>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_DMA_IRQHandler+0x448>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d04f      	beq.n	8001380 <HAL_DMA_IRQHandler+0x3b8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a4b      	ldr	r2, [pc, #300]	; (8001414 <HAL_DMA_IRQHandler+0x44c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d048      	beq.n	800137c <HAL_DMA_IRQHandler+0x3b4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a4a      	ldr	r2, [pc, #296]	; (8001418 <HAL_DMA_IRQHandler+0x450>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d040      	beq.n	8001376 <HAL_DMA_IRQHandler+0x3ae>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a48      	ldr	r2, [pc, #288]	; (800141c <HAL_DMA_IRQHandler+0x454>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d038      	beq.n	8001370 <HAL_DMA_IRQHandler+0x3a8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a47      	ldr	r2, [pc, #284]	; (8001420 <HAL_DMA_IRQHandler+0x458>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d030      	beq.n	800136a <HAL_DMA_IRQHandler+0x3a2>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a45      	ldr	r2, [pc, #276]	; (8001424 <HAL_DMA_IRQHandler+0x45c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d028      	beq.n	8001364 <HAL_DMA_IRQHandler+0x39c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_DMA_IRQHandler+0x444>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d020      	beq.n	800135e <HAL_DMA_IRQHandler+0x396>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a41      	ldr	r2, [pc, #260]	; (8001428 <HAL_DMA_IRQHandler+0x460>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_DMA_IRQHandler+0x392>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <HAL_DMA_IRQHandler+0x464>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d012      	beq.n	8001356 <HAL_DMA_IRQHandler+0x38e>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a3e      	ldr	r2, [pc, #248]	; (8001430 <HAL_DMA_IRQHandler+0x468>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00a      	beq.n	8001350 <HAL_DMA_IRQHandler+0x388>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_DMA_IRQHandler+0x46c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <HAL_DMA_IRQHandler+0x382>
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	e01b      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	e018      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 8001350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001354:	e015      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 8001356:	2320      	movs	r3, #32
 8001358:	e013      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 800135a:	2302      	movs	r3, #2
 800135c:	e011      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 800135e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001362:	e00e      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 8001364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001368:	e00b      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 800136a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800136e:	e008      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	e005      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 8001376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137a:	e002      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 800137c:	2320      	movs	r3, #32
 800137e:	e000      	b.n	8001382 <HAL_DMA_IRQHandler+0x3ba>
 8001380:	2302      	movs	r3, #2
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_DMA_IRQHandler+0x474>)
 8001384:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	2b00      	cmp	r3, #0
 8001394:	d034      	beq.n	8001400 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800139e:	e02f      	b.n	8001400 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	2208      	movs	r2, #8
 80013a6:	409a      	lsls	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d028      	beq.n	8001402 <HAL_DMA_IRQHandler+0x43a>
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d023      	beq.n	8001402 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020e 	bic.w	r2, r2, #14
 80013c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
    }
  }
  return;
 8001400:	bf00      	nop
 8001402:	bf00      	nop
}
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020080 	.word	0x40020080
 8001410:	40020008 	.word	0x40020008
 8001414:	4002001c 	.word	0x4002001c
 8001418:	40020030 	.word	0x40020030
 800141c:	40020044 	.word	0x40020044
 8001420:	40020058 	.word	0x40020058
 8001424:	4002006c 	.word	0x4002006c
 8001428:	40020408 	.word	0x40020408
 800142c:	4002041c 	.word	0x4002041c
 8001430:	40020430 	.word	0x40020430
 8001434:	40020444 	.word	0x40020444
 8001438:	40020400 	.word	0x40020400
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	; 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e179      	b.n	8001748 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8168 	bne.w	8001742 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a96      	ldr	r2, [pc, #600]	; (80016d0 <HAL_GPIO_Init+0x290>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d05e      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 800147c:	4a94      	ldr	r2, [pc, #592]	; (80016d0 <HAL_GPIO_Init+0x290>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d875      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 8001482:	4a94      	ldr	r2, [pc, #592]	; (80016d4 <HAL_GPIO_Init+0x294>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d058      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001488:	4a92      	ldr	r2, [pc, #584]	; (80016d4 <HAL_GPIO_Init+0x294>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d86f      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800148e:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_GPIO_Init+0x298>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d052      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001494:	4a90      	ldr	r2, [pc, #576]	; (80016d8 <HAL_GPIO_Init+0x298>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d869      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800149a:	4a90      	ldr	r2, [pc, #576]	; (80016dc <HAL_GPIO_Init+0x29c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04c      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014a0:	4a8e      	ldr	r2, [pc, #568]	; (80016dc <HAL_GPIO_Init+0x29c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d863      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014a6:	4a8e      	ldr	r2, [pc, #568]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d046      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014ac:	4a8c      	ldr	r2, [pc, #560]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d85d      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d82a      	bhi.n	800150c <HAL_GPIO_Init+0xcc>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d859      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <HAL_GPIO_Init+0x80>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001527 	.word	0x08001527
 80014cc:	08001569 	.word	0x08001569
 80014d0:	0800156f 	.word	0x0800156f
 80014d4:	0800156f 	.word	0x0800156f
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	0800156f 	.word	0x0800156f
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	0800156f 	.word	0x0800156f
 80014e8:	0800156f 	.word	0x0800156f
 80014ec:	0800156f 	.word	0x0800156f
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	0800156f 	.word	0x0800156f
 80014fc:	0800156f 	.word	0x0800156f
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001531 	.word	0x08001531
 800150c:	4a75      	ldr	r2, [pc, #468]	; (80016e4 <HAL_GPIO_Init+0x2a4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e02c      	b.n	800156e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e029      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	3304      	adds	r3, #4
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e024      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	3308      	adds	r3, #8
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e01f      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e01a      	b.n	8001570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e013      	b.n	8001570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	611a      	str	r2, [r3, #16]
          break;
 800155a:	e009      	b.n	8001570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	615a      	str	r2, [r3, #20]
          break;
 8001566:	e003      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x130>
          break;
 800156e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d801      	bhi.n	800157a <HAL_GPIO_Init+0x13a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <HAL_GPIO_Init+0x13e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d802      	bhi.n	800158c <HAL_GPIO_Init+0x14c>
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x152>
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3b08      	subs	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	210f      	movs	r1, #15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80c1 	beq.w	8001742 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	4a44      	ldr	r2, [pc, #272]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d01f      	beq.n	8001644 <HAL_GPIO_Init+0x204>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <HAL_GPIO_Init+0x2b4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d019      	beq.n	8001640 <HAL_GPIO_Init+0x200>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3a      	ldr	r2, [pc, #232]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1fc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1f8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a38      	ldr	r2, [pc, #224]	; (8001700 <HAL_GPIO_Init+0x2c0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1f4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <HAL_GPIO_Init+0x2c4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1f0>
 800162c:	2305      	movs	r3, #5
 800162e:	e00a      	b.n	8001646 <HAL_GPIO_Init+0x206>
 8001630:	2306      	movs	r3, #6
 8001632:	e008      	b.n	8001646 <HAL_GPIO_Init+0x206>
 8001634:	2304      	movs	r3, #4
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x206>
 8001638:	2303      	movs	r3, #3
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x206>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x206>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x206>
 8001644:	2300      	movs	r3, #0
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001656:	4925      	ldr	r1, [pc, #148]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4924      	ldr	r1, [pc, #144]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4920      	ldr	r1, [pc, #128]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 8001688:	4013      	ands	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	491a      	ldr	r1, [pc, #104]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4916      	ldr	r1, [pc, #88]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d025      	beq.n	800170c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	4910      	ldr	r1, [pc, #64]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
 80016cc:	e025      	b.n	800171a <HAL_GPIO_Init+0x2da>
 80016ce:	bf00      	nop
 80016d0:	10320000 	.word	0x10320000
 80016d4:	10310000 	.word	0x10310000
 80016d8:	10220000 	.word	0x10220000
 80016dc:	10210000 	.word	0x10210000
 80016e0:	10120000 	.word	0x10120000
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	40010c00 	.word	0x40010c00
 80016f8:	40011000 	.word	0x40011000
 80016fc:	40011400 	.word	0x40011400
 8001700:	40011800 	.word	0x40011800
 8001704:	40011c00 	.word	0x40011c00
 8001708:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_GPIO_Init+0x324>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	43db      	mvns	r3, r3
 8001714:	4913      	ldr	r1, [pc, #76]	; (8001764 <HAL_GPIO_Init+0x324>)
 8001716:	4013      	ands	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_GPIO_Init+0x324>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <HAL_GPIO_Init+0x324>)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_GPIO_Init+0x324>)
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	43db      	mvns	r3, r3
 800173c:	4909      	ldr	r1, [pc, #36]	; (8001764 <HAL_GPIO_Init+0x324>)
 800173e:	4013      	ands	r3, r2
 8001740:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3301      	adds	r3, #1
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	f47f ae7e 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	372c      	adds	r7, #44	; 0x2c
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40010400 	.word	0x40010400

08001768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e272      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8087 	beq.w	8001896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001788:	4b92      	ldr	r3, [pc, #584]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b04      	cmp	r3, #4
 8001792:	d00c      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001794:	4b8f      	ldr	r3, [pc, #572]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d112      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d10b      	bne.n	80017c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b89      	ldr	r3, [pc, #548]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d06c      	beq.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d168      	bne.n	8001894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e24c      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x76>
 80017d0:	4b80      	ldr	r3, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a7f      	ldr	r2, [pc, #508]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e02e      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7a      	ldr	r2, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a77      	ldr	r2, [pc, #476]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e01d      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0xbc>
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a71      	ldr	r2, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b6f      	ldr	r3, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xd4>
 8001824:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6a      	ldr	r2, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff f8f0 	bl	8000a28 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff f8ec 	bl	8000a28 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e200      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xe4>
 800186a:	e014      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff f8dc 	bl	8000a28 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001874:	f7ff f8d8 	bl	8000a28 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b64      	cmp	r3, #100	; 0x64
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e1ec      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x10c>
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d063      	beq.n	800196a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1c0      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4939      	ldr	r1, [pc, #228]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f891 	bl	8000a28 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff f88d 	bl	8000a28 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1a1      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x270>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f870 	bl	8000a28 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff f86c 	bl	8000a28 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e180      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d03a      	beq.n	80019ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d019      	beq.n	80019b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff f850 	bl	8000a28 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff f84c 	bl	8000a28 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e160      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f000 fad8 	bl	8001f60 <RCC_Delay>
 80019b0:	e01c      	b.n	80019ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_RCC_OscConfig+0x274>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff f836 	bl	8000a28 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019be:	e00f      	b.n	80019e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c0:	f7ff f832 	bl	8000a28 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d908      	bls.n	80019e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e146      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	42420000 	.word	0x42420000
 80019dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b92      	ldr	r3, [pc, #584]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1e9      	bne.n	80019c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a6 	beq.w	8001b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b88      	ldr	r3, [pc, #544]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a87      	ldr	r2, [pc, #540]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b85      	ldr	r3, [pc, #532]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a22:	2301      	movs	r3, #1
 8001a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d118      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a32:	4b7f      	ldr	r3, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a7e      	ldr	r2, [pc, #504]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3e:	f7fe fff3 	bl	8000a28 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a46:	f7fe ffef 	bl	8000a28 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e103      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <HAL_RCC_OscConfig+0x4c8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x312>
 8001a6c:	4b6f      	ldr	r3, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a6e      	ldr	r2, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e02d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001a82:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a69      	ldr	r2, [pc, #420]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6213      	str	r3, [r2, #32]
 8001a8e:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0304 	bic.w	r3, r3, #4
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	e01c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x356>
 8001aa4:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a60      	ldr	r2, [pc, #384]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	4b5e      	ldr	r3, [pc, #376]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6213      	str	r3, [r2, #32]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x36e>
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a5a      	ldr	r2, [pc, #360]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d015      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7fe ffa3 	bl	8000a28 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe ff9f 	bl	8000a28 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0b1      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afc:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ee      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x37e>
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7fe ff8d 	bl	8000a28 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe ff89 	bl	8000a28 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e09b      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b28:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1ee      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8087 	beq.w	8001c5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d061      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d146      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7fe ff5d 	bl	8000a28 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7fe ff59 	bl	8000a28 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e06d      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	4921      	ldr	r1, [pc, #132]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a19      	ldr	r1, [r3, #32]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	491b      	ldr	r1, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7fe ff2d 	bl	8000a28 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7fe ff29 	bl	8000a28 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03d      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x46a>
 8001bf0:	e035      	b.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_OscConfig+0x4cc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7fe ff16 	bl	8000a28 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe ff12 	bl	8000a28 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e026      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x498>
 8001c1e:	e01e      	b.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e019      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40007000 	.word	0x40007000
 8001c34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x500>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0d0      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c80:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d910      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4965      	ldr	r1, [pc, #404]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b63      	ldr	r3, [pc, #396]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0b8      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a58      	ldr	r2, [pc, #352]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	494d      	ldr	r1, [pc, #308]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d040      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d115      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e073      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06b      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f023 0203 	bic.w	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4936      	ldr	r1, [pc, #216]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fe64 	bl	8000a28 <HAL_GetTick>
 8001d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe fe60 	bl	8000a28 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e053      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 020c 	and.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d1eb      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d210      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4922      	ldr	r1, [pc, #136]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4916      	ldr	r1, [pc, #88]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	490e      	ldr	r1, [pc, #56]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfa:	f000 f821 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	490a      	ldr	r1, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0c:	5ccb      	ldrb	r3, [r1, r3]
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_RCC_ClockConfig+0x1cc>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1d0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fdc2 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08003f30 	.word	0x08003f30
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	b490      	push	{r4, r7}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_RCC_GetSysClockFreq+0xac>)
 8001e48:	1d3c      	adds	r4, r7, #4
 8001e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e50:	f240 2301 	movw	r3, #513	; 0x201
 8001e54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7e:	e02b      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e82:	623b      	str	r3, [r7, #32]
      break;
 8001e84:	e02b      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	0c9b      	lsrs	r3, r3, #18
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3328      	adds	r3, #40	; 0x28
 8001e90:	443b      	add	r3, r7
 8001e92:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e96:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d012      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0c5b      	lsrs	r3, r3, #17
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	3328      	adds	r3, #40	; 0x28
 8001eae:	443b      	add	r3, r7
 8001eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eba:	fb03 f202 	mul.w	r2, r3, r2
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	e004      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	623b      	str	r3, [r7, #32]
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eda:	623b      	str	r3, [r7, #32]
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc90      	pop	{r4, r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	08003f20 	.word	0x08003f20
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	007a1200 	.word	0x007a1200
 8001ef8:	003d0900 	.word	0x003d0900

08001efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	20000000 	.word	0x20000000

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f14:	f7ff fff2 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4903      	ldr	r1, [pc, #12]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003f40 	.word	0x08003f40

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f3c:	f7ff ffde 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	0adb      	lsrs	r3, r3, #11
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	; (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08003f40 	.word	0x08003f40

08001f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <RCC_Delay+0x34>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <RCC_Delay+0x38>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a5b      	lsrs	r3, r3, #9
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f7c:	bf00      	nop
  }
  while (Delay --);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e5a      	subs	r2, r3, #1
 8001f82:	60fa      	str	r2, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <RCC_Delay+0x1c>
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000000 	.word	0x20000000
 8001f98:	10624dd3 	.word	0x10624dd3

08001f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e041      	b.n	8002032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe faca 	bl	800055c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f000 f8ec 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002052:	2302      	movs	r3, #2
 8002054:	e0ac      	b.n	80021b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	f200 809f 	bhi.w	80021a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002066:	a201      	add	r2, pc, #4	; (adr r2, 800206c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206c:	080020a1 	.word	0x080020a1
 8002070:	080021a5 	.word	0x080021a5
 8002074:	080021a5 	.word	0x080021a5
 8002078:	080021a5 	.word	0x080021a5
 800207c:	080020e1 	.word	0x080020e1
 8002080:	080021a5 	.word	0x080021a5
 8002084:	080021a5 	.word	0x080021a5
 8002088:	080021a5 	.word	0x080021a5
 800208c:	08002123 	.word	0x08002123
 8002090:	080021a5 	.word	0x080021a5
 8002094:	080021a5 	.word	0x080021a5
 8002098:	080021a5 	.word	0x080021a5
 800209c:	08002163 	.word	0x08002163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f900 	bl	80022ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0208 	orr.w	r2, r2, #8
 80020ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0204 	bic.w	r2, r2, #4
 80020ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6999      	ldr	r1, [r3, #24]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	619a      	str	r2, [r3, #24]
      break;
 80020de:	e062      	b.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f950 	bl	800238c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6999      	ldr	r1, [r3, #24]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	021a      	lsls	r2, r3, #8
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	619a      	str	r2, [r3, #24]
      break;
 8002120:	e041      	b.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f9a3 	bl	8002474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0208 	orr.w	r2, r2, #8
 800213c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0204 	bic.w	r2, r2, #4
 800214c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69d9      	ldr	r1, [r3, #28]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
      break;
 8002160:	e021      	b.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f9f7 	bl	800255c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69d9      	ldr	r1, [r3, #28]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	61da      	str	r2, [r3, #28]
      break;
 80021a2:	e000      	b.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80021a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a33      	ldr	r2, [pc, #204]	; (8002298 <TIM_Base_SetConfig+0xe0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a32      	ldr	r2, [pc, #200]	; (800229c <TIM_Base_SetConfig+0xe4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00f      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <TIM_Base_SetConfig+0xe8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <TIM_Base_SetConfig+0xec>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <TIM_Base_SetConfig+0xf0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <TIM_Base_SetConfig+0xe0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <TIM_Base_SetConfig+0x82>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a21      	ldr	r2, [pc, #132]	; (800229c <TIM_Base_SetConfig+0xe4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00f      	beq.n	800223a <TIM_Base_SetConfig+0x82>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002220:	d00b      	beq.n	800223a <TIM_Base_SetConfig+0x82>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <TIM_Base_SetConfig+0xe8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <TIM_Base_SetConfig+0x82>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <TIM_Base_SetConfig+0xec>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d003      	beq.n	800223a <TIM_Base_SetConfig+0x82>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <TIM_Base_SetConfig+0xf0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d108      	bne.n	800224c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <TIM_Base_SetConfig+0xe0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_Base_SetConfig+0xc8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <TIM_Base_SetConfig+0xe4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d103      	bne.n	8002288 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	615a      	str	r2, [r3, #20]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40013400 	.word	0x40013400
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800
 80022a8:	40000c00 	.word	0x40000c00

080022ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f023 0201 	bic.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f023 0302 	bic.w	r3, r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <TIM_OC1_SetConfig+0xd8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_OC1_SetConfig+0x64>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <TIM_OC1_SetConfig+0xdc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10c      	bne.n	800232a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 0308 	bic.w	r3, r3, #8
 8002316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a15      	ldr	r2, [pc, #84]	; (8002384 <TIM_OC1_SetConfig+0xd8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_OC1_SetConfig+0x8e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <TIM_OC1_SetConfig+0xdc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d111      	bne.n	800235e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	621a      	str	r2, [r3, #32]
}
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40013400 	.word	0x40013400

0800238c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f023 0210 	bic.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f023 0320 	bic.w	r3, r3, #32
 80023d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a21      	ldr	r2, [pc, #132]	; (800246c <TIM_OC2_SetConfig+0xe0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_OC2_SetConfig+0x68>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a20      	ldr	r2, [pc, #128]	; (8002470 <TIM_OC2_SetConfig+0xe4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d10d      	bne.n	8002410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800240e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <TIM_OC2_SetConfig+0xe0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_OC2_SetConfig+0x94>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <TIM_OC2_SetConfig+0xe4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d113      	bne.n	8002448 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800242e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	621a      	str	r2, [r3, #32]
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40013400 	.word	0x40013400

08002474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <TIM_OC3_SetConfig+0xe0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_OC3_SetConfig+0x66>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a20      	ldr	r2, [pc, #128]	; (8002558 <TIM_OC3_SetConfig+0xe4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10d      	bne.n	80024f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a16      	ldr	r2, [pc, #88]	; (8002554 <TIM_OC3_SetConfig+0xe0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_OC3_SetConfig+0x92>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a15      	ldr	r2, [pc, #84]	; (8002558 <TIM_OC3_SetConfig+0xe4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d113      	bne.n	800252e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800250c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	621a      	str	r2, [r3, #32]
}
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40013400 	.word	0x40013400

0800255c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	031b      	lsls	r3, r3, #12
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <TIM_OC4_SetConfig+0xa0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_OC4_SetConfig+0x68>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <TIM_OC4_SetConfig+0xa4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	621a      	str	r2, [r3, #32]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40013400 	.word	0x40013400

08002604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002618:	2302      	movs	r3, #2
 800261a:	e050      	b.n	80026be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002672:	d00e      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10c      	bne.n	80026ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40013400 	.word	0x40013400
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800
 80026d8:	40000c00 	.word	0x40000c00

080026dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e03d      	b.n	8002774 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e03f      	b.n	8002810 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fd ff2b 	bl	8000600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2224      	movs	r2, #36	; 0x24
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fb48 	bl	8002e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_UART_IRQHandler+0x52>
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa4f 	bl	8002d06 <UART_Receive_IT>
      return;
 8002868:	e17b      	b.n	8002b62 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80b1 	beq.w	80029d4 <HAL_UART_IRQHandler+0x1bc>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_UART_IRQHandler+0x70>
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a6 	beq.w	80029d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_UART_IRQHandler+0x90>
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_UART_IRQHandler+0xb0>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0202 	orr.w	r2, r3, #2
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_UART_IRQHandler+0xd0>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0204 	orr.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00f      	beq.n	8002912 <HAL_UART_IRQHandler+0xfa>
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <HAL_UART_IRQHandler+0xee>
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0208 	orr.w	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 811e 	beq.w	8002b58 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_UART_IRQHandler+0x11e>
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f9e8 	bl	8002d06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <HAL_UART_IRQHandler+0x146>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d031      	beq.n	80029c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f92a 	bl	8002bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d023      	beq.n	80029ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002980:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	2b00      	cmp	r3, #0
 8002988:	d013      	beq.n	80029b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	4a76      	ldr	r2, [pc, #472]	; (8002b68 <HAL_UART_IRQHandler+0x350>)
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fa0e 	bl	8000db8 <HAL_DMA_Abort_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	e00e      	b.n	80029d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8ec 	bl	8002b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	e00a      	b.n	80029d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8e8 	bl	8002b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	e006      	b.n	80029d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8e4 	bl	8002b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029ce:	e0c3      	b.n	8002b58 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	bf00      	nop
    return;
 80029d2:	e0c1      	b.n	8002b58 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f040 80a1 	bne.w	8002b20 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 809b 	beq.w	8002b20 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8095 	beq.w	8002b20 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04e      	beq.n	8002ab8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a24:	8a3b      	ldrh	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8098 	beq.w	8002b5c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a30:	8a3a      	ldrh	r2, [r7, #16]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	f080 8092 	bcs.w	8002b5c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8a3a      	ldrh	r2, [r7, #16]
 8002a3c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	d02b      	beq.n	8002aa0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a56:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a76:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0210 	bic.w	r2, r2, #16
 8002a94:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe f952 	bl	8000d44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f876 	bl	8002ba2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ab6:	e051      	b.n	8002b5c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d047      	beq.n	8002b60 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d044      	beq.n	8002b60 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ae4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0210 	bic.w	r2, r2, #16
 8002b12:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b14:	8a7b      	ldrh	r3, [r7, #18]
 8002b16:	4619      	mov	r1, r3
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f842 	bl	8002ba2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b1e:	e01f      	b.n	8002b60 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_UART_IRQHandler+0x324>
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f87f 	bl	8002c38 <UART_Transmit_IT>
    return;
 8002b3a:	e012      	b.n	8002b62 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <HAL_UART_IRQHandler+0x34a>
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8c0 	bl	8002cd6 <UART_EndTransmit_IT>
    return;
 8002b56:	e004      	b.n	8002b62 <HAL_UART_IRQHandler+0x34a>
    return;
 8002b58:	bf00      	nop
 8002b5a:	e002      	b.n	8002b62 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b5c:	bf00      	nop
 8002b5e:	e000      	b.n	8002b62 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b60:	bf00      	nop
  }
}
 8002b62:	3728      	adds	r7, #40	; 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	08002c11 	.word	0x08002c11

08002b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0210 	bic.w	r2, r2, #16
 8002bf6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff ffb0 	bl	8002b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b21      	cmp	r3, #33	; 0x21
 8002c4a:	d13e      	bne.n	8002cca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d114      	bne.n	8002c80 <UART_Transmit_IT+0x48>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d110      	bne.n	8002c80 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]
 8002c7e:	e008      	b.n	8002c92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	1c59      	adds	r1, r3, #1
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6211      	str	r1, [r2, #32]
 8002c8a:	781a      	ldrb	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff38 	bl	8002b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b22      	cmp	r3, #34	; 0x22
 8002d18:	f040 8099 	bne.w	8002e4e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d117      	bne.n	8002d56 <UART_Receive_IT+0x50>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d113      	bne.n	8002d56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	1c9a      	adds	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28
 8002d54:	e026      	b.n	8002da4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d68:	d007      	beq.n	8002d7a <UART_Receive_IT+0x74>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <UART_Receive_IT+0x82>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e008      	b.n	8002d9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4619      	mov	r1, r3
 8002db2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d148      	bne.n	8002e4a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0220 	bic.w	r2, r2, #32
 8002dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d123      	bne.n	8002e40 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0210 	bic.w	r2, r2, #16
 8002e0c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d10a      	bne.n	8002e32 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff feb2 	bl	8002ba2 <HAL_UARTEx_RxEventCallback>
 8002e3e:	e002      	b.n	8002e46 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fe9c 	bl	8002b7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e002      	b.n	8002e50 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e92:	f023 030c 	bic.w	r3, r3, #12
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <UART_SetConfig+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ec0:	f7ff f83a 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	e002      	b.n	8002ece <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f7ff f822 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <UART_SetConfig+0x118>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	0119      	lsls	r1, r3, #4
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009a      	lsls	r2, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <UART_SetConfig+0x118>)
 8002f06:	fba3 0302 	umull	r0, r3, r3, r2
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2064      	movs	r0, #100	; 0x64
 8002f0e:	fb00 f303 	mul.w	r3, r0, r3
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	3332      	adds	r3, #50	; 0x32
 8002f18:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <UART_SetConfig+0x118>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f24:	4419      	add	r1, r3
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <UART_SetConfig+0x118>)
 8002f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2064      	movs	r0, #100	; 0x64
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <UART_SetConfig+0x118>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	440a      	add	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	51eb851f 	.word	0x51eb851f

08002f74 <__errno>:
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <__errno+0x8>)
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2600      	movs	r6, #0
 8002f84:	4d0c      	ldr	r5, [pc, #48]	; (8002fb8 <__libc_init_array+0x38>)
 8002f86:	4c0d      	ldr	r4, [pc, #52]	; (8002fbc <__libc_init_array+0x3c>)
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	42a6      	cmp	r6, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	f000 ffb6 	bl	8003f00 <_init>
 8002f94:	2600      	movs	r6, #0
 8002f96:	4d0a      	ldr	r5, [pc, #40]	; (8002fc0 <__libc_init_array+0x40>)
 8002f98:	4c0a      	ldr	r4, [pc, #40]	; (8002fc4 <__libc_init_array+0x44>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	42a6      	cmp	r6, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa8:	4798      	blx	r3
 8002faa:	3601      	adds	r6, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb2:	4798      	blx	r3
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	08003fe0 	.word	0x08003fe0
 8002fbc:	08003fe0 	.word	0x08003fe0
 8002fc0:	08003fe0 	.word	0x08003fe0
 8002fc4:	08003fe4 	.word	0x08003fe4

08002fc8 <memset>:
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4402      	add	r2, r0
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d100      	bne.n	8002fd2 <memset+0xa>
 8002fd0:	4770      	bx	lr
 8002fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fd6:	e7f9      	b.n	8002fcc <memset+0x4>

08002fd8 <iprintf>:
 8002fd8:	b40f      	push	{r0, r1, r2, r3}
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <iprintf+0x2c>)
 8002fdc:	b513      	push	{r0, r1, r4, lr}
 8002fde:	681c      	ldr	r4, [r3, #0]
 8002fe0:	b124      	cbz	r4, 8002fec <iprintf+0x14>
 8002fe2:	69a3      	ldr	r3, [r4, #24]
 8002fe4:	b913      	cbnz	r3, 8002fec <iprintf+0x14>
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f000 f866 	bl	80030b8 <__sinit>
 8002fec:	ab05      	add	r3, sp, #20
 8002fee:	4620      	mov	r0, r4
 8002ff0:	9a04      	ldr	r2, [sp, #16]
 8002ff2:	68a1      	ldr	r1, [r4, #8]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	f000 f9bb 	bl	8003370 <_vfiprintf_r>
 8002ffa:	b002      	add	sp, #8
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	b004      	add	sp, #16
 8003002:	4770      	bx	lr
 8003004:	2000000c 	.word	0x2000000c

08003008 <std>:
 8003008:	2300      	movs	r3, #0
 800300a:	b510      	push	{r4, lr}
 800300c:	4604      	mov	r4, r0
 800300e:	e9c0 3300 	strd	r3, r3, [r0]
 8003012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003016:	6083      	str	r3, [r0, #8]
 8003018:	8181      	strh	r1, [r0, #12]
 800301a:	6643      	str	r3, [r0, #100]	; 0x64
 800301c:	81c2      	strh	r2, [r0, #14]
 800301e:	6183      	str	r3, [r0, #24]
 8003020:	4619      	mov	r1, r3
 8003022:	2208      	movs	r2, #8
 8003024:	305c      	adds	r0, #92	; 0x5c
 8003026:	f7ff ffcf 	bl	8002fc8 <memset>
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <std+0x38>)
 800302c:	6224      	str	r4, [r4, #32]
 800302e:	6263      	str	r3, [r4, #36]	; 0x24
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <std+0x3c>)
 8003032:	62a3      	str	r3, [r4, #40]	; 0x28
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <std+0x40>)
 8003036:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <std+0x44>)
 800303a:	6323      	str	r3, [r4, #48]	; 0x30
 800303c:	bd10      	pop	{r4, pc}
 800303e:	bf00      	nop
 8003040:	0800391d 	.word	0x0800391d
 8003044:	0800393f 	.word	0x0800393f
 8003048:	08003977 	.word	0x08003977
 800304c:	0800399b 	.word	0x0800399b

08003050 <_cleanup_r>:
 8003050:	4901      	ldr	r1, [pc, #4]	; (8003058 <_cleanup_r+0x8>)
 8003052:	f000 b8af 	b.w	80031b4 <_fwalk_reent>
 8003056:	bf00      	nop
 8003058:	08003c6d 	.word	0x08003c6d

0800305c <__sfmoreglue>:
 800305c:	2268      	movs	r2, #104	; 0x68
 800305e:	b570      	push	{r4, r5, r6, lr}
 8003060:	1e4d      	subs	r5, r1, #1
 8003062:	4355      	muls	r5, r2
 8003064:	460e      	mov	r6, r1
 8003066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800306a:	f000 f8e5 	bl	8003238 <_malloc_r>
 800306e:	4604      	mov	r4, r0
 8003070:	b140      	cbz	r0, 8003084 <__sfmoreglue+0x28>
 8003072:	2100      	movs	r1, #0
 8003074:	e9c0 1600 	strd	r1, r6, [r0]
 8003078:	300c      	adds	r0, #12
 800307a:	60a0      	str	r0, [r4, #8]
 800307c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003080:	f7ff ffa2 	bl	8002fc8 <memset>
 8003084:	4620      	mov	r0, r4
 8003086:	bd70      	pop	{r4, r5, r6, pc}

08003088 <__sfp_lock_acquire>:
 8003088:	4801      	ldr	r0, [pc, #4]	; (8003090 <__sfp_lock_acquire+0x8>)
 800308a:	f000 b8b3 	b.w	80031f4 <__retarget_lock_acquire_recursive>
 800308e:	bf00      	nop
 8003090:	200001a9 	.word	0x200001a9

08003094 <__sfp_lock_release>:
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <__sfp_lock_release+0x8>)
 8003096:	f000 b8ae 	b.w	80031f6 <__retarget_lock_release_recursive>
 800309a:	bf00      	nop
 800309c:	200001a9 	.word	0x200001a9

080030a0 <__sinit_lock_acquire>:
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <__sinit_lock_acquire+0x8>)
 80030a2:	f000 b8a7 	b.w	80031f4 <__retarget_lock_acquire_recursive>
 80030a6:	bf00      	nop
 80030a8:	200001aa 	.word	0x200001aa

080030ac <__sinit_lock_release>:
 80030ac:	4801      	ldr	r0, [pc, #4]	; (80030b4 <__sinit_lock_release+0x8>)
 80030ae:	f000 b8a2 	b.w	80031f6 <__retarget_lock_release_recursive>
 80030b2:	bf00      	nop
 80030b4:	200001aa 	.word	0x200001aa

080030b8 <__sinit>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	f7ff fff0 	bl	80030a0 <__sinit_lock_acquire>
 80030c0:	69a3      	ldr	r3, [r4, #24]
 80030c2:	b11b      	cbz	r3, 80030cc <__sinit+0x14>
 80030c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030c8:	f7ff bff0 	b.w	80030ac <__sinit_lock_release>
 80030cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030d0:	6523      	str	r3, [r4, #80]	; 0x50
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <__sinit+0x68>)
 80030d4:	4a13      	ldr	r2, [pc, #76]	; (8003124 <__sinit+0x6c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80030da:	42a3      	cmp	r3, r4
 80030dc:	bf08      	it	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	4620      	mov	r0, r4
 80030e2:	bf08      	it	eq
 80030e4:	61a3      	streq	r3, [r4, #24]
 80030e6:	f000 f81f 	bl	8003128 <__sfp>
 80030ea:	6060      	str	r0, [r4, #4]
 80030ec:	4620      	mov	r0, r4
 80030ee:	f000 f81b 	bl	8003128 <__sfp>
 80030f2:	60a0      	str	r0, [r4, #8]
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 f817 	bl	8003128 <__sfp>
 80030fa:	2200      	movs	r2, #0
 80030fc:	2104      	movs	r1, #4
 80030fe:	60e0      	str	r0, [r4, #12]
 8003100:	6860      	ldr	r0, [r4, #4]
 8003102:	f7ff ff81 	bl	8003008 <std>
 8003106:	2201      	movs	r2, #1
 8003108:	2109      	movs	r1, #9
 800310a:	68a0      	ldr	r0, [r4, #8]
 800310c:	f7ff ff7c 	bl	8003008 <std>
 8003110:	2202      	movs	r2, #2
 8003112:	2112      	movs	r1, #18
 8003114:	68e0      	ldr	r0, [r4, #12]
 8003116:	f7ff ff77 	bl	8003008 <std>
 800311a:	2301      	movs	r3, #1
 800311c:	61a3      	str	r3, [r4, #24]
 800311e:	e7d1      	b.n	80030c4 <__sinit+0xc>
 8003120:	08003f48 	.word	0x08003f48
 8003124:	08003051 	.word	0x08003051

08003128 <__sfp>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	4607      	mov	r7, r0
 800312c:	f7ff ffac 	bl	8003088 <__sfp_lock_acquire>
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <__sfp+0x84>)
 8003132:	681e      	ldr	r6, [r3, #0]
 8003134:	69b3      	ldr	r3, [r6, #24]
 8003136:	b913      	cbnz	r3, 800313e <__sfp+0x16>
 8003138:	4630      	mov	r0, r6
 800313a:	f7ff ffbd 	bl	80030b8 <__sinit>
 800313e:	3648      	adds	r6, #72	; 0x48
 8003140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003144:	3b01      	subs	r3, #1
 8003146:	d503      	bpl.n	8003150 <__sfp+0x28>
 8003148:	6833      	ldr	r3, [r6, #0]
 800314a:	b30b      	cbz	r3, 8003190 <__sfp+0x68>
 800314c:	6836      	ldr	r6, [r6, #0]
 800314e:	e7f7      	b.n	8003140 <__sfp+0x18>
 8003150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003154:	b9d5      	cbnz	r5, 800318c <__sfp+0x64>
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <__sfp+0x88>)
 8003158:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800315c:	60e3      	str	r3, [r4, #12]
 800315e:	6665      	str	r5, [r4, #100]	; 0x64
 8003160:	f000 f847 	bl	80031f2 <__retarget_lock_init_recursive>
 8003164:	f7ff ff96 	bl	8003094 <__sfp_lock_release>
 8003168:	2208      	movs	r2, #8
 800316a:	4629      	mov	r1, r5
 800316c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003170:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003174:	6025      	str	r5, [r4, #0]
 8003176:	61a5      	str	r5, [r4, #24]
 8003178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800317c:	f7ff ff24 	bl	8002fc8 <memset>
 8003180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003188:	4620      	mov	r0, r4
 800318a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800318c:	3468      	adds	r4, #104	; 0x68
 800318e:	e7d9      	b.n	8003144 <__sfp+0x1c>
 8003190:	2104      	movs	r1, #4
 8003192:	4638      	mov	r0, r7
 8003194:	f7ff ff62 	bl	800305c <__sfmoreglue>
 8003198:	4604      	mov	r4, r0
 800319a:	6030      	str	r0, [r6, #0]
 800319c:	2800      	cmp	r0, #0
 800319e:	d1d5      	bne.n	800314c <__sfp+0x24>
 80031a0:	f7ff ff78 	bl	8003094 <__sfp_lock_release>
 80031a4:	230c      	movs	r3, #12
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	e7ee      	b.n	8003188 <__sfp+0x60>
 80031aa:	bf00      	nop
 80031ac:	08003f48 	.word	0x08003f48
 80031b0:	ffff0001 	.word	0xffff0001

080031b4 <_fwalk_reent>:
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	4606      	mov	r6, r0
 80031ba:	4688      	mov	r8, r1
 80031bc:	2700      	movs	r7, #0
 80031be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031c6:	f1b9 0901 	subs.w	r9, r9, #1
 80031ca:	d505      	bpl.n	80031d8 <_fwalk_reent+0x24>
 80031cc:	6824      	ldr	r4, [r4, #0]
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d1f7      	bne.n	80031c2 <_fwalk_reent+0xe>
 80031d2:	4638      	mov	r0, r7
 80031d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031d8:	89ab      	ldrh	r3, [r5, #12]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d907      	bls.n	80031ee <_fwalk_reent+0x3a>
 80031de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031e2:	3301      	adds	r3, #1
 80031e4:	d003      	beq.n	80031ee <_fwalk_reent+0x3a>
 80031e6:	4629      	mov	r1, r5
 80031e8:	4630      	mov	r0, r6
 80031ea:	47c0      	blx	r8
 80031ec:	4307      	orrs	r7, r0
 80031ee:	3568      	adds	r5, #104	; 0x68
 80031f0:	e7e9      	b.n	80031c6 <_fwalk_reent+0x12>

080031f2 <__retarget_lock_init_recursive>:
 80031f2:	4770      	bx	lr

080031f4 <__retarget_lock_acquire_recursive>:
 80031f4:	4770      	bx	lr

080031f6 <__retarget_lock_release_recursive>:
 80031f6:	4770      	bx	lr

080031f8 <sbrk_aligned>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4e0e      	ldr	r6, [pc, #56]	; (8003234 <sbrk_aligned+0x3c>)
 80031fc:	460c      	mov	r4, r1
 80031fe:	6831      	ldr	r1, [r6, #0]
 8003200:	4605      	mov	r5, r0
 8003202:	b911      	cbnz	r1, 800320a <sbrk_aligned+0x12>
 8003204:	f000 fb7a 	bl	80038fc <_sbrk_r>
 8003208:	6030      	str	r0, [r6, #0]
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 fb75 	bl	80038fc <_sbrk_r>
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	d00a      	beq.n	800322c <sbrk_aligned+0x34>
 8003216:	1cc4      	adds	r4, r0, #3
 8003218:	f024 0403 	bic.w	r4, r4, #3
 800321c:	42a0      	cmp	r0, r4
 800321e:	d007      	beq.n	8003230 <sbrk_aligned+0x38>
 8003220:	1a21      	subs	r1, r4, r0
 8003222:	4628      	mov	r0, r5
 8003224:	f000 fb6a 	bl	80038fc <_sbrk_r>
 8003228:	3001      	adds	r0, #1
 800322a:	d101      	bne.n	8003230 <sbrk_aligned+0x38>
 800322c:	f04f 34ff 	mov.w	r4, #4294967295
 8003230:	4620      	mov	r0, r4
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	200001b0 	.word	0x200001b0

08003238 <_malloc_r>:
 8003238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800323c:	1ccd      	adds	r5, r1, #3
 800323e:	f025 0503 	bic.w	r5, r5, #3
 8003242:	3508      	adds	r5, #8
 8003244:	2d0c      	cmp	r5, #12
 8003246:	bf38      	it	cc
 8003248:	250c      	movcc	r5, #12
 800324a:	2d00      	cmp	r5, #0
 800324c:	4607      	mov	r7, r0
 800324e:	db01      	blt.n	8003254 <_malloc_r+0x1c>
 8003250:	42a9      	cmp	r1, r5
 8003252:	d905      	bls.n	8003260 <_malloc_r+0x28>
 8003254:	230c      	movs	r3, #12
 8003256:	2600      	movs	r6, #0
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4630      	mov	r0, r6
 800325c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003260:	4e2e      	ldr	r6, [pc, #184]	; (800331c <_malloc_r+0xe4>)
 8003262:	f000 fdc5 	bl	8003df0 <__malloc_lock>
 8003266:	6833      	ldr	r3, [r6, #0]
 8003268:	461c      	mov	r4, r3
 800326a:	bb34      	cbnz	r4, 80032ba <_malloc_r+0x82>
 800326c:	4629      	mov	r1, r5
 800326e:	4638      	mov	r0, r7
 8003270:	f7ff ffc2 	bl	80031f8 <sbrk_aligned>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	4604      	mov	r4, r0
 8003278:	d14d      	bne.n	8003316 <_malloc_r+0xde>
 800327a:	6834      	ldr	r4, [r6, #0]
 800327c:	4626      	mov	r6, r4
 800327e:	2e00      	cmp	r6, #0
 8003280:	d140      	bne.n	8003304 <_malloc_r+0xcc>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	4631      	mov	r1, r6
 8003286:	4638      	mov	r0, r7
 8003288:	eb04 0803 	add.w	r8, r4, r3
 800328c:	f000 fb36 	bl	80038fc <_sbrk_r>
 8003290:	4580      	cmp	r8, r0
 8003292:	d13a      	bne.n	800330a <_malloc_r+0xd2>
 8003294:	6821      	ldr	r1, [r4, #0]
 8003296:	3503      	adds	r5, #3
 8003298:	1a6d      	subs	r5, r5, r1
 800329a:	f025 0503 	bic.w	r5, r5, #3
 800329e:	3508      	adds	r5, #8
 80032a0:	2d0c      	cmp	r5, #12
 80032a2:	bf38      	it	cc
 80032a4:	250c      	movcc	r5, #12
 80032a6:	4638      	mov	r0, r7
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7ff ffa5 	bl	80031f8 <sbrk_aligned>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d02b      	beq.n	800330a <_malloc_r+0xd2>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	442b      	add	r3, r5
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	e00e      	b.n	80032d8 <_malloc_r+0xa0>
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	1b52      	subs	r2, r2, r5
 80032be:	d41e      	bmi.n	80032fe <_malloc_r+0xc6>
 80032c0:	2a0b      	cmp	r2, #11
 80032c2:	d916      	bls.n	80032f2 <_malloc_r+0xba>
 80032c4:	1961      	adds	r1, r4, r5
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	6025      	str	r5, [r4, #0]
 80032ca:	bf18      	it	ne
 80032cc:	6059      	strne	r1, [r3, #4]
 80032ce:	6863      	ldr	r3, [r4, #4]
 80032d0:	bf08      	it	eq
 80032d2:	6031      	streq	r1, [r6, #0]
 80032d4:	5162      	str	r2, [r4, r5]
 80032d6:	604b      	str	r3, [r1, #4]
 80032d8:	4638      	mov	r0, r7
 80032da:	f104 060b 	add.w	r6, r4, #11
 80032de:	f000 fd8d 	bl	8003dfc <__malloc_unlock>
 80032e2:	f026 0607 	bic.w	r6, r6, #7
 80032e6:	1d23      	adds	r3, r4, #4
 80032e8:	1af2      	subs	r2, r6, r3
 80032ea:	d0b6      	beq.n	800325a <_malloc_r+0x22>
 80032ec:	1b9b      	subs	r3, r3, r6
 80032ee:	50a3      	str	r3, [r4, r2]
 80032f0:	e7b3      	b.n	800325a <_malloc_r+0x22>
 80032f2:	6862      	ldr	r2, [r4, #4]
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	bf0c      	ite	eq
 80032f8:	6032      	streq	r2, [r6, #0]
 80032fa:	605a      	strne	r2, [r3, #4]
 80032fc:	e7ec      	b.n	80032d8 <_malloc_r+0xa0>
 80032fe:	4623      	mov	r3, r4
 8003300:	6864      	ldr	r4, [r4, #4]
 8003302:	e7b2      	b.n	800326a <_malloc_r+0x32>
 8003304:	4634      	mov	r4, r6
 8003306:	6876      	ldr	r6, [r6, #4]
 8003308:	e7b9      	b.n	800327e <_malloc_r+0x46>
 800330a:	230c      	movs	r3, #12
 800330c:	4638      	mov	r0, r7
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	f000 fd74 	bl	8003dfc <__malloc_unlock>
 8003314:	e7a1      	b.n	800325a <_malloc_r+0x22>
 8003316:	6025      	str	r5, [r4, #0]
 8003318:	e7de      	b.n	80032d8 <_malloc_r+0xa0>
 800331a:	bf00      	nop
 800331c:	200001ac 	.word	0x200001ac

08003320 <__sfputc_r>:
 8003320:	6893      	ldr	r3, [r2, #8]
 8003322:	b410      	push	{r4}
 8003324:	3b01      	subs	r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	6093      	str	r3, [r2, #8]
 800332a:	da07      	bge.n	800333c <__sfputc_r+0x1c>
 800332c:	6994      	ldr	r4, [r2, #24]
 800332e:	42a3      	cmp	r3, r4
 8003330:	db01      	blt.n	8003336 <__sfputc_r+0x16>
 8003332:	290a      	cmp	r1, #10
 8003334:	d102      	bne.n	800333c <__sfputc_r+0x1c>
 8003336:	bc10      	pop	{r4}
 8003338:	f000 bb34 	b.w	80039a4 <__swbuf_r>
 800333c:	6813      	ldr	r3, [r2, #0]
 800333e:	1c58      	adds	r0, r3, #1
 8003340:	6010      	str	r0, [r2, #0]
 8003342:	7019      	strb	r1, [r3, #0]
 8003344:	4608      	mov	r0, r1
 8003346:	bc10      	pop	{r4}
 8003348:	4770      	bx	lr

0800334a <__sfputs_r>:
 800334a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334c:	4606      	mov	r6, r0
 800334e:	460f      	mov	r7, r1
 8003350:	4614      	mov	r4, r2
 8003352:	18d5      	adds	r5, r2, r3
 8003354:	42ac      	cmp	r4, r5
 8003356:	d101      	bne.n	800335c <__sfputs_r+0x12>
 8003358:	2000      	movs	r0, #0
 800335a:	e007      	b.n	800336c <__sfputs_r+0x22>
 800335c:	463a      	mov	r2, r7
 800335e:	4630      	mov	r0, r6
 8003360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003364:	f7ff ffdc 	bl	8003320 <__sfputc_r>
 8003368:	1c43      	adds	r3, r0, #1
 800336a:	d1f3      	bne.n	8003354 <__sfputs_r+0xa>
 800336c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003370 <_vfiprintf_r>:
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	460d      	mov	r5, r1
 8003376:	4614      	mov	r4, r2
 8003378:	4698      	mov	r8, r3
 800337a:	4606      	mov	r6, r0
 800337c:	b09d      	sub	sp, #116	; 0x74
 800337e:	b118      	cbz	r0, 8003388 <_vfiprintf_r+0x18>
 8003380:	6983      	ldr	r3, [r0, #24]
 8003382:	b90b      	cbnz	r3, 8003388 <_vfiprintf_r+0x18>
 8003384:	f7ff fe98 	bl	80030b8 <__sinit>
 8003388:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <_vfiprintf_r+0x240>)
 800338a:	429d      	cmp	r5, r3
 800338c:	d11b      	bne.n	80033c6 <_vfiprintf_r+0x56>
 800338e:	6875      	ldr	r5, [r6, #4]
 8003390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003392:	07d9      	lsls	r1, r3, #31
 8003394:	d405      	bmi.n	80033a2 <_vfiprintf_r+0x32>
 8003396:	89ab      	ldrh	r3, [r5, #12]
 8003398:	059a      	lsls	r2, r3, #22
 800339a:	d402      	bmi.n	80033a2 <_vfiprintf_r+0x32>
 800339c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800339e:	f7ff ff29 	bl	80031f4 <__retarget_lock_acquire_recursive>
 80033a2:	89ab      	ldrh	r3, [r5, #12]
 80033a4:	071b      	lsls	r3, r3, #28
 80033a6:	d501      	bpl.n	80033ac <_vfiprintf_r+0x3c>
 80033a8:	692b      	ldr	r3, [r5, #16]
 80033aa:	b9eb      	cbnz	r3, 80033e8 <_vfiprintf_r+0x78>
 80033ac:	4629      	mov	r1, r5
 80033ae:	4630      	mov	r0, r6
 80033b0:	f000 fb5c 	bl	8003a6c <__swsetup_r>
 80033b4:	b1c0      	cbz	r0, 80033e8 <_vfiprintf_r+0x78>
 80033b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033b8:	07dc      	lsls	r4, r3, #31
 80033ba:	d50e      	bpl.n	80033da <_vfiprintf_r+0x6a>
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	b01d      	add	sp, #116	; 0x74
 80033c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c6:	4b7b      	ldr	r3, [pc, #492]	; (80035b4 <_vfiprintf_r+0x244>)
 80033c8:	429d      	cmp	r5, r3
 80033ca:	d101      	bne.n	80033d0 <_vfiprintf_r+0x60>
 80033cc:	68b5      	ldr	r5, [r6, #8]
 80033ce:	e7df      	b.n	8003390 <_vfiprintf_r+0x20>
 80033d0:	4b79      	ldr	r3, [pc, #484]	; (80035b8 <_vfiprintf_r+0x248>)
 80033d2:	429d      	cmp	r5, r3
 80033d4:	bf08      	it	eq
 80033d6:	68f5      	ldreq	r5, [r6, #12]
 80033d8:	e7da      	b.n	8003390 <_vfiprintf_r+0x20>
 80033da:	89ab      	ldrh	r3, [r5, #12]
 80033dc:	0598      	lsls	r0, r3, #22
 80033de:	d4ed      	bmi.n	80033bc <_vfiprintf_r+0x4c>
 80033e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033e2:	f7ff ff08 	bl	80031f6 <__retarget_lock_release_recursive>
 80033e6:	e7e9      	b.n	80033bc <_vfiprintf_r+0x4c>
 80033e8:	2300      	movs	r3, #0
 80033ea:	9309      	str	r3, [sp, #36]	; 0x24
 80033ec:	2320      	movs	r3, #32
 80033ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033f2:	2330      	movs	r3, #48	; 0x30
 80033f4:	f04f 0901 	mov.w	r9, #1
 80033f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80033fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80035bc <_vfiprintf_r+0x24c>
 8003400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003404:	4623      	mov	r3, r4
 8003406:	469a      	mov	sl, r3
 8003408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800340c:	b10a      	cbz	r2, 8003412 <_vfiprintf_r+0xa2>
 800340e:	2a25      	cmp	r2, #37	; 0x25
 8003410:	d1f9      	bne.n	8003406 <_vfiprintf_r+0x96>
 8003412:	ebba 0b04 	subs.w	fp, sl, r4
 8003416:	d00b      	beq.n	8003430 <_vfiprintf_r+0xc0>
 8003418:	465b      	mov	r3, fp
 800341a:	4622      	mov	r2, r4
 800341c:	4629      	mov	r1, r5
 800341e:	4630      	mov	r0, r6
 8003420:	f7ff ff93 	bl	800334a <__sfputs_r>
 8003424:	3001      	adds	r0, #1
 8003426:	f000 80aa 	beq.w	800357e <_vfiprintf_r+0x20e>
 800342a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800342c:	445a      	add	r2, fp
 800342e:	9209      	str	r2, [sp, #36]	; 0x24
 8003430:	f89a 3000 	ldrb.w	r3, [sl]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80a2 	beq.w	800357e <_vfiprintf_r+0x20e>
 800343a:	2300      	movs	r3, #0
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003444:	f10a 0a01 	add.w	sl, sl, #1
 8003448:	9304      	str	r3, [sp, #16]
 800344a:	9307      	str	r3, [sp, #28]
 800344c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003450:	931a      	str	r3, [sp, #104]	; 0x68
 8003452:	4654      	mov	r4, sl
 8003454:	2205      	movs	r2, #5
 8003456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800345a:	4858      	ldr	r0, [pc, #352]	; (80035bc <_vfiprintf_r+0x24c>)
 800345c:	f000 fcba 	bl	8003dd4 <memchr>
 8003460:	9a04      	ldr	r2, [sp, #16]
 8003462:	b9d8      	cbnz	r0, 800349c <_vfiprintf_r+0x12c>
 8003464:	06d1      	lsls	r1, r2, #27
 8003466:	bf44      	itt	mi
 8003468:	2320      	movmi	r3, #32
 800346a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800346e:	0713      	lsls	r3, r2, #28
 8003470:	bf44      	itt	mi
 8003472:	232b      	movmi	r3, #43	; 0x2b
 8003474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003478:	f89a 3000 	ldrb.w	r3, [sl]
 800347c:	2b2a      	cmp	r3, #42	; 0x2a
 800347e:	d015      	beq.n	80034ac <_vfiprintf_r+0x13c>
 8003480:	4654      	mov	r4, sl
 8003482:	2000      	movs	r0, #0
 8003484:	f04f 0c0a 	mov.w	ip, #10
 8003488:	9a07      	ldr	r2, [sp, #28]
 800348a:	4621      	mov	r1, r4
 800348c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003490:	3b30      	subs	r3, #48	; 0x30
 8003492:	2b09      	cmp	r3, #9
 8003494:	d94e      	bls.n	8003534 <_vfiprintf_r+0x1c4>
 8003496:	b1b0      	cbz	r0, 80034c6 <_vfiprintf_r+0x156>
 8003498:	9207      	str	r2, [sp, #28]
 800349a:	e014      	b.n	80034c6 <_vfiprintf_r+0x156>
 800349c:	eba0 0308 	sub.w	r3, r0, r8
 80034a0:	fa09 f303 	lsl.w	r3, r9, r3
 80034a4:	4313      	orrs	r3, r2
 80034a6:	46a2      	mov	sl, r4
 80034a8:	9304      	str	r3, [sp, #16]
 80034aa:	e7d2      	b.n	8003452 <_vfiprintf_r+0xe2>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	1d19      	adds	r1, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	9103      	str	r1, [sp, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bfbb      	ittet	lt
 80034b8:	425b      	neglt	r3, r3
 80034ba:	f042 0202 	orrlt.w	r2, r2, #2
 80034be:	9307      	strge	r3, [sp, #28]
 80034c0:	9307      	strlt	r3, [sp, #28]
 80034c2:	bfb8      	it	lt
 80034c4:	9204      	strlt	r2, [sp, #16]
 80034c6:	7823      	ldrb	r3, [r4, #0]
 80034c8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ca:	d10c      	bne.n	80034e6 <_vfiprintf_r+0x176>
 80034cc:	7863      	ldrb	r3, [r4, #1]
 80034ce:	2b2a      	cmp	r3, #42	; 0x2a
 80034d0:	d135      	bne.n	800353e <_vfiprintf_r+0x1ce>
 80034d2:	9b03      	ldr	r3, [sp, #12]
 80034d4:	3402      	adds	r4, #2
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	9203      	str	r2, [sp, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bfb8      	it	lt
 80034e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80034e4:	9305      	str	r3, [sp, #20]
 80034e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80035c0 <_vfiprintf_r+0x250>
 80034ea:	2203      	movs	r2, #3
 80034ec:	4650      	mov	r0, sl
 80034ee:	7821      	ldrb	r1, [r4, #0]
 80034f0:	f000 fc70 	bl	8003dd4 <memchr>
 80034f4:	b140      	cbz	r0, 8003508 <_vfiprintf_r+0x198>
 80034f6:	2340      	movs	r3, #64	; 0x40
 80034f8:	eba0 000a 	sub.w	r0, r0, sl
 80034fc:	fa03 f000 	lsl.w	r0, r3, r0
 8003500:	9b04      	ldr	r3, [sp, #16]
 8003502:	3401      	adds	r4, #1
 8003504:	4303      	orrs	r3, r0
 8003506:	9304      	str	r3, [sp, #16]
 8003508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350c:	2206      	movs	r2, #6
 800350e:	482d      	ldr	r0, [pc, #180]	; (80035c4 <_vfiprintf_r+0x254>)
 8003510:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003514:	f000 fc5e 	bl	8003dd4 <memchr>
 8003518:	2800      	cmp	r0, #0
 800351a:	d03f      	beq.n	800359c <_vfiprintf_r+0x22c>
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <_vfiprintf_r+0x258>)
 800351e:	bb1b      	cbnz	r3, 8003568 <_vfiprintf_r+0x1f8>
 8003520:	9b03      	ldr	r3, [sp, #12]
 8003522:	3307      	adds	r3, #7
 8003524:	f023 0307 	bic.w	r3, r3, #7
 8003528:	3308      	adds	r3, #8
 800352a:	9303      	str	r3, [sp, #12]
 800352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800352e:	443b      	add	r3, r7
 8003530:	9309      	str	r3, [sp, #36]	; 0x24
 8003532:	e767      	b.n	8003404 <_vfiprintf_r+0x94>
 8003534:	460c      	mov	r4, r1
 8003536:	2001      	movs	r0, #1
 8003538:	fb0c 3202 	mla	r2, ip, r2, r3
 800353c:	e7a5      	b.n	800348a <_vfiprintf_r+0x11a>
 800353e:	2300      	movs	r3, #0
 8003540:	f04f 0c0a 	mov.w	ip, #10
 8003544:	4619      	mov	r1, r3
 8003546:	3401      	adds	r4, #1
 8003548:	9305      	str	r3, [sp, #20]
 800354a:	4620      	mov	r0, r4
 800354c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003550:	3a30      	subs	r2, #48	; 0x30
 8003552:	2a09      	cmp	r2, #9
 8003554:	d903      	bls.n	800355e <_vfiprintf_r+0x1ee>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0c5      	beq.n	80034e6 <_vfiprintf_r+0x176>
 800355a:	9105      	str	r1, [sp, #20]
 800355c:	e7c3      	b.n	80034e6 <_vfiprintf_r+0x176>
 800355e:	4604      	mov	r4, r0
 8003560:	2301      	movs	r3, #1
 8003562:	fb0c 2101 	mla	r1, ip, r1, r2
 8003566:	e7f0      	b.n	800354a <_vfiprintf_r+0x1da>
 8003568:	ab03      	add	r3, sp, #12
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	462a      	mov	r2, r5
 800356e:	4630      	mov	r0, r6
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <_vfiprintf_r+0x25c>)
 8003572:	a904      	add	r1, sp, #16
 8003574:	f3af 8000 	nop.w
 8003578:	4607      	mov	r7, r0
 800357a:	1c78      	adds	r0, r7, #1
 800357c:	d1d6      	bne.n	800352c <_vfiprintf_r+0x1bc>
 800357e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003580:	07d9      	lsls	r1, r3, #31
 8003582:	d405      	bmi.n	8003590 <_vfiprintf_r+0x220>
 8003584:	89ab      	ldrh	r3, [r5, #12]
 8003586:	059a      	lsls	r2, r3, #22
 8003588:	d402      	bmi.n	8003590 <_vfiprintf_r+0x220>
 800358a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800358c:	f7ff fe33 	bl	80031f6 <__retarget_lock_release_recursive>
 8003590:	89ab      	ldrh	r3, [r5, #12]
 8003592:	065b      	lsls	r3, r3, #25
 8003594:	f53f af12 	bmi.w	80033bc <_vfiprintf_r+0x4c>
 8003598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800359a:	e711      	b.n	80033c0 <_vfiprintf_r+0x50>
 800359c:	ab03      	add	r3, sp, #12
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	462a      	mov	r2, r5
 80035a2:	4630      	mov	r0, r6
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <_vfiprintf_r+0x25c>)
 80035a6:	a904      	add	r1, sp, #16
 80035a8:	f000 f882 	bl	80036b0 <_printf_i>
 80035ac:	e7e4      	b.n	8003578 <_vfiprintf_r+0x208>
 80035ae:	bf00      	nop
 80035b0:	08003f6c 	.word	0x08003f6c
 80035b4:	08003f8c 	.word	0x08003f8c
 80035b8:	08003f4c 	.word	0x08003f4c
 80035bc:	08003fac 	.word	0x08003fac
 80035c0:	08003fb2 	.word	0x08003fb2
 80035c4:	08003fb6 	.word	0x08003fb6
 80035c8:	00000000 	.word	0x00000000
 80035cc:	0800334b 	.word	0x0800334b

080035d0 <_printf_common>:
 80035d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	4616      	mov	r6, r2
 80035d6:	4699      	mov	r9, r3
 80035d8:	688a      	ldr	r2, [r1, #8]
 80035da:	690b      	ldr	r3, [r1, #16]
 80035dc:	4607      	mov	r7, r0
 80035de:	4293      	cmp	r3, r2
 80035e0:	bfb8      	it	lt
 80035e2:	4613      	movlt	r3, r2
 80035e4:	6033      	str	r3, [r6, #0]
 80035e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035ea:	460c      	mov	r4, r1
 80035ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035f0:	b10a      	cbz	r2, 80035f6 <_printf_common+0x26>
 80035f2:	3301      	adds	r3, #1
 80035f4:	6033      	str	r3, [r6, #0]
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	0699      	lsls	r1, r3, #26
 80035fa:	bf42      	ittt	mi
 80035fc:	6833      	ldrmi	r3, [r6, #0]
 80035fe:	3302      	addmi	r3, #2
 8003600:	6033      	strmi	r3, [r6, #0]
 8003602:	6825      	ldr	r5, [r4, #0]
 8003604:	f015 0506 	ands.w	r5, r5, #6
 8003608:	d106      	bne.n	8003618 <_printf_common+0x48>
 800360a:	f104 0a19 	add.w	sl, r4, #25
 800360e:	68e3      	ldr	r3, [r4, #12]
 8003610:	6832      	ldr	r2, [r6, #0]
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	42ab      	cmp	r3, r5
 8003616:	dc28      	bgt.n	800366a <_printf_common+0x9a>
 8003618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800361c:	1e13      	subs	r3, r2, #0
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	bf18      	it	ne
 8003622:	2301      	movne	r3, #1
 8003624:	0692      	lsls	r2, r2, #26
 8003626:	d42d      	bmi.n	8003684 <_printf_common+0xb4>
 8003628:	4649      	mov	r1, r9
 800362a:	4638      	mov	r0, r7
 800362c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d020      	beq.n	8003678 <_printf_common+0xa8>
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	68e5      	ldr	r5, [r4, #12]
 800363a:	f003 0306 	and.w	r3, r3, #6
 800363e:	2b04      	cmp	r3, #4
 8003640:	bf18      	it	ne
 8003642:	2500      	movne	r5, #0
 8003644:	6832      	ldr	r2, [r6, #0]
 8003646:	f04f 0600 	mov.w	r6, #0
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	bf08      	it	eq
 800364e:	1aad      	subeq	r5, r5, r2
 8003650:	6922      	ldr	r2, [r4, #16]
 8003652:	bf08      	it	eq
 8003654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003658:	4293      	cmp	r3, r2
 800365a:	bfc4      	itt	gt
 800365c:	1a9b      	subgt	r3, r3, r2
 800365e:	18ed      	addgt	r5, r5, r3
 8003660:	341a      	adds	r4, #26
 8003662:	42b5      	cmp	r5, r6
 8003664:	d11a      	bne.n	800369c <_printf_common+0xcc>
 8003666:	2000      	movs	r0, #0
 8003668:	e008      	b.n	800367c <_printf_common+0xac>
 800366a:	2301      	movs	r3, #1
 800366c:	4652      	mov	r2, sl
 800366e:	4649      	mov	r1, r9
 8003670:	4638      	mov	r0, r7
 8003672:	47c0      	blx	r8
 8003674:	3001      	adds	r0, #1
 8003676:	d103      	bne.n	8003680 <_printf_common+0xb0>
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	3501      	adds	r5, #1
 8003682:	e7c4      	b.n	800360e <_printf_common+0x3e>
 8003684:	2030      	movs	r0, #48	; 0x30
 8003686:	18e1      	adds	r1, r4, r3
 8003688:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003692:	4422      	add	r2, r4
 8003694:	3302      	adds	r3, #2
 8003696:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800369a:	e7c5      	b.n	8003628 <_printf_common+0x58>
 800369c:	2301      	movs	r3, #1
 800369e:	4622      	mov	r2, r4
 80036a0:	4649      	mov	r1, r9
 80036a2:	4638      	mov	r0, r7
 80036a4:	47c0      	blx	r8
 80036a6:	3001      	adds	r0, #1
 80036a8:	d0e6      	beq.n	8003678 <_printf_common+0xa8>
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7d9      	b.n	8003662 <_printf_common+0x92>
	...

080036b0 <_printf_i>:
 80036b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	7e0f      	ldrb	r7, [r1, #24]
 80036b6:	4691      	mov	r9, r2
 80036b8:	2f78      	cmp	r7, #120	; 0x78
 80036ba:	4680      	mov	r8, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	469a      	mov	sl, r3
 80036c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036c6:	d807      	bhi.n	80036d8 <_printf_i+0x28>
 80036c8:	2f62      	cmp	r7, #98	; 0x62
 80036ca:	d80a      	bhi.n	80036e2 <_printf_i+0x32>
 80036cc:	2f00      	cmp	r7, #0
 80036ce:	f000 80d9 	beq.w	8003884 <_printf_i+0x1d4>
 80036d2:	2f58      	cmp	r7, #88	; 0x58
 80036d4:	f000 80a4 	beq.w	8003820 <_printf_i+0x170>
 80036d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036e0:	e03a      	b.n	8003758 <_printf_i+0xa8>
 80036e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036e6:	2b15      	cmp	r3, #21
 80036e8:	d8f6      	bhi.n	80036d8 <_printf_i+0x28>
 80036ea:	a101      	add	r1, pc, #4	; (adr r1, 80036f0 <_printf_i+0x40>)
 80036ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036f0:	08003749 	.word	0x08003749
 80036f4:	0800375d 	.word	0x0800375d
 80036f8:	080036d9 	.word	0x080036d9
 80036fc:	080036d9 	.word	0x080036d9
 8003700:	080036d9 	.word	0x080036d9
 8003704:	080036d9 	.word	0x080036d9
 8003708:	0800375d 	.word	0x0800375d
 800370c:	080036d9 	.word	0x080036d9
 8003710:	080036d9 	.word	0x080036d9
 8003714:	080036d9 	.word	0x080036d9
 8003718:	080036d9 	.word	0x080036d9
 800371c:	0800386b 	.word	0x0800386b
 8003720:	0800378d 	.word	0x0800378d
 8003724:	0800384d 	.word	0x0800384d
 8003728:	080036d9 	.word	0x080036d9
 800372c:	080036d9 	.word	0x080036d9
 8003730:	0800388d 	.word	0x0800388d
 8003734:	080036d9 	.word	0x080036d9
 8003738:	0800378d 	.word	0x0800378d
 800373c:	080036d9 	.word	0x080036d9
 8003740:	080036d9 	.word	0x080036d9
 8003744:	08003855 	.word	0x08003855
 8003748:	682b      	ldr	r3, [r5, #0]
 800374a:	1d1a      	adds	r2, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	602a      	str	r2, [r5, #0]
 8003750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003758:	2301      	movs	r3, #1
 800375a:	e0a4      	b.n	80038a6 <_printf_i+0x1f6>
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	6829      	ldr	r1, [r5, #0]
 8003760:	0606      	lsls	r6, r0, #24
 8003762:	f101 0304 	add.w	r3, r1, #4
 8003766:	d50a      	bpl.n	800377e <_printf_i+0xce>
 8003768:	680e      	ldr	r6, [r1, #0]
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	2e00      	cmp	r6, #0
 800376e:	da03      	bge.n	8003778 <_printf_i+0xc8>
 8003770:	232d      	movs	r3, #45	; 0x2d
 8003772:	4276      	negs	r6, r6
 8003774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003778:	230a      	movs	r3, #10
 800377a:	485e      	ldr	r0, [pc, #376]	; (80038f4 <_printf_i+0x244>)
 800377c:	e019      	b.n	80037b2 <_printf_i+0x102>
 800377e:	680e      	ldr	r6, [r1, #0]
 8003780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003784:	602b      	str	r3, [r5, #0]
 8003786:	bf18      	it	ne
 8003788:	b236      	sxthne	r6, r6
 800378a:	e7ef      	b.n	800376c <_printf_i+0xbc>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	1d19      	adds	r1, r3, #4
 8003792:	6029      	str	r1, [r5, #0]
 8003794:	0601      	lsls	r1, r0, #24
 8003796:	d501      	bpl.n	800379c <_printf_i+0xec>
 8003798:	681e      	ldr	r6, [r3, #0]
 800379a:	e002      	b.n	80037a2 <_printf_i+0xf2>
 800379c:	0646      	lsls	r6, r0, #25
 800379e:	d5fb      	bpl.n	8003798 <_printf_i+0xe8>
 80037a0:	881e      	ldrh	r6, [r3, #0]
 80037a2:	2f6f      	cmp	r7, #111	; 0x6f
 80037a4:	bf0c      	ite	eq
 80037a6:	2308      	moveq	r3, #8
 80037a8:	230a      	movne	r3, #10
 80037aa:	4852      	ldr	r0, [pc, #328]	; (80038f4 <_printf_i+0x244>)
 80037ac:	2100      	movs	r1, #0
 80037ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037b2:	6865      	ldr	r5, [r4, #4]
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	bfa8      	it	ge
 80037b8:	6821      	ldrge	r1, [r4, #0]
 80037ba:	60a5      	str	r5, [r4, #8]
 80037bc:	bfa4      	itt	ge
 80037be:	f021 0104 	bicge.w	r1, r1, #4
 80037c2:	6021      	strge	r1, [r4, #0]
 80037c4:	b90e      	cbnz	r6, 80037ca <_printf_i+0x11a>
 80037c6:	2d00      	cmp	r5, #0
 80037c8:	d04d      	beq.n	8003866 <_printf_i+0x1b6>
 80037ca:	4615      	mov	r5, r2
 80037cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80037d0:	fb03 6711 	mls	r7, r3, r1, r6
 80037d4:	5dc7      	ldrb	r7, [r0, r7]
 80037d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037da:	4637      	mov	r7, r6
 80037dc:	42bb      	cmp	r3, r7
 80037de:	460e      	mov	r6, r1
 80037e0:	d9f4      	bls.n	80037cc <_printf_i+0x11c>
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d10b      	bne.n	80037fe <_printf_i+0x14e>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	07de      	lsls	r6, r3, #31
 80037ea:	d508      	bpl.n	80037fe <_printf_i+0x14e>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	6861      	ldr	r1, [r4, #4]
 80037f0:	4299      	cmp	r1, r3
 80037f2:	bfde      	ittt	le
 80037f4:	2330      	movle	r3, #48	; 0x30
 80037f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037fe:	1b52      	subs	r2, r2, r5
 8003800:	6122      	str	r2, [r4, #16]
 8003802:	464b      	mov	r3, r9
 8003804:	4621      	mov	r1, r4
 8003806:	4640      	mov	r0, r8
 8003808:	f8cd a000 	str.w	sl, [sp]
 800380c:	aa03      	add	r2, sp, #12
 800380e:	f7ff fedf 	bl	80035d0 <_printf_common>
 8003812:	3001      	adds	r0, #1
 8003814:	d14c      	bne.n	80038b0 <_printf_i+0x200>
 8003816:	f04f 30ff 	mov.w	r0, #4294967295
 800381a:	b004      	add	sp, #16
 800381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003820:	4834      	ldr	r0, [pc, #208]	; (80038f4 <_printf_i+0x244>)
 8003822:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003826:	6829      	ldr	r1, [r5, #0]
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	f851 6b04 	ldr.w	r6, [r1], #4
 800382e:	6029      	str	r1, [r5, #0]
 8003830:	061d      	lsls	r5, r3, #24
 8003832:	d514      	bpl.n	800385e <_printf_i+0x1ae>
 8003834:	07df      	lsls	r7, r3, #31
 8003836:	bf44      	itt	mi
 8003838:	f043 0320 	orrmi.w	r3, r3, #32
 800383c:	6023      	strmi	r3, [r4, #0]
 800383e:	b91e      	cbnz	r6, 8003848 <_printf_i+0x198>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f023 0320 	bic.w	r3, r3, #32
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	2310      	movs	r3, #16
 800384a:	e7af      	b.n	80037ac <_printf_i+0xfc>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	f043 0320 	orr.w	r3, r3, #32
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	2378      	movs	r3, #120	; 0x78
 8003856:	4828      	ldr	r0, [pc, #160]	; (80038f8 <_printf_i+0x248>)
 8003858:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800385c:	e7e3      	b.n	8003826 <_printf_i+0x176>
 800385e:	0659      	lsls	r1, r3, #25
 8003860:	bf48      	it	mi
 8003862:	b2b6      	uxthmi	r6, r6
 8003864:	e7e6      	b.n	8003834 <_printf_i+0x184>
 8003866:	4615      	mov	r5, r2
 8003868:	e7bb      	b.n	80037e2 <_printf_i+0x132>
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	6826      	ldr	r6, [r4, #0]
 800386e:	1d18      	adds	r0, r3, #4
 8003870:	6961      	ldr	r1, [r4, #20]
 8003872:	6028      	str	r0, [r5, #0]
 8003874:	0635      	lsls	r5, r6, #24
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	d501      	bpl.n	800387e <_printf_i+0x1ce>
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	e002      	b.n	8003884 <_printf_i+0x1d4>
 800387e:	0670      	lsls	r0, r6, #25
 8003880:	d5fb      	bpl.n	800387a <_printf_i+0x1ca>
 8003882:	8019      	strh	r1, [r3, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	4615      	mov	r5, r2
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	e7ba      	b.n	8003802 <_printf_i+0x152>
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	2100      	movs	r1, #0
 8003890:	1d1a      	adds	r2, r3, #4
 8003892:	602a      	str	r2, [r5, #0]
 8003894:	681d      	ldr	r5, [r3, #0]
 8003896:	6862      	ldr	r2, [r4, #4]
 8003898:	4628      	mov	r0, r5
 800389a:	f000 fa9b 	bl	8003dd4 <memchr>
 800389e:	b108      	cbz	r0, 80038a4 <_printf_i+0x1f4>
 80038a0:	1b40      	subs	r0, r0, r5
 80038a2:	6060      	str	r0, [r4, #4]
 80038a4:	6863      	ldr	r3, [r4, #4]
 80038a6:	6123      	str	r3, [r4, #16]
 80038a8:	2300      	movs	r3, #0
 80038aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ae:	e7a8      	b.n	8003802 <_printf_i+0x152>
 80038b0:	462a      	mov	r2, r5
 80038b2:	4649      	mov	r1, r9
 80038b4:	4640      	mov	r0, r8
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	47d0      	blx	sl
 80038ba:	3001      	adds	r0, #1
 80038bc:	d0ab      	beq.n	8003816 <_printf_i+0x166>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	079b      	lsls	r3, r3, #30
 80038c2:	d413      	bmi.n	80038ec <_printf_i+0x23c>
 80038c4:	68e0      	ldr	r0, [r4, #12]
 80038c6:	9b03      	ldr	r3, [sp, #12]
 80038c8:	4298      	cmp	r0, r3
 80038ca:	bfb8      	it	lt
 80038cc:	4618      	movlt	r0, r3
 80038ce:	e7a4      	b.n	800381a <_printf_i+0x16a>
 80038d0:	2301      	movs	r3, #1
 80038d2:	4632      	mov	r2, r6
 80038d4:	4649      	mov	r1, r9
 80038d6:	4640      	mov	r0, r8
 80038d8:	47d0      	blx	sl
 80038da:	3001      	adds	r0, #1
 80038dc:	d09b      	beq.n	8003816 <_printf_i+0x166>
 80038de:	3501      	adds	r5, #1
 80038e0:	68e3      	ldr	r3, [r4, #12]
 80038e2:	9903      	ldr	r1, [sp, #12]
 80038e4:	1a5b      	subs	r3, r3, r1
 80038e6:	42ab      	cmp	r3, r5
 80038e8:	dcf2      	bgt.n	80038d0 <_printf_i+0x220>
 80038ea:	e7eb      	b.n	80038c4 <_printf_i+0x214>
 80038ec:	2500      	movs	r5, #0
 80038ee:	f104 0619 	add.w	r6, r4, #25
 80038f2:	e7f5      	b.n	80038e0 <_printf_i+0x230>
 80038f4:	08003fbd 	.word	0x08003fbd
 80038f8:	08003fce 	.word	0x08003fce

080038fc <_sbrk_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	2300      	movs	r3, #0
 8003900:	4d05      	ldr	r5, [pc, #20]	; (8003918 <_sbrk_r+0x1c>)
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	f7fc ffd4 	bl	80008b4 <_sbrk>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_sbrk_r+0x1a>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	b103      	cbz	r3, 8003916 <_sbrk_r+0x1a>
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	200001b4 	.word	0x200001b4

0800391c <__sread>:
 800391c:	b510      	push	{r4, lr}
 800391e:	460c      	mov	r4, r1
 8003920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003924:	f000 fab8 	bl	8003e98 <_read_r>
 8003928:	2800      	cmp	r0, #0
 800392a:	bfab      	itete	ge
 800392c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800392e:	89a3      	ldrhlt	r3, [r4, #12]
 8003930:	181b      	addge	r3, r3, r0
 8003932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003936:	bfac      	ite	ge
 8003938:	6563      	strge	r3, [r4, #84]	; 0x54
 800393a:	81a3      	strhlt	r3, [r4, #12]
 800393c:	bd10      	pop	{r4, pc}

0800393e <__swrite>:
 800393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	461f      	mov	r7, r3
 8003944:	898b      	ldrh	r3, [r1, #12]
 8003946:	4605      	mov	r5, r0
 8003948:	05db      	lsls	r3, r3, #23
 800394a:	460c      	mov	r4, r1
 800394c:	4616      	mov	r6, r2
 800394e:	d505      	bpl.n	800395c <__swrite+0x1e>
 8003950:	2302      	movs	r3, #2
 8003952:	2200      	movs	r2, #0
 8003954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003958:	f000 f9c4 	bl	8003ce4 <_lseek_r>
 800395c:	89a3      	ldrh	r3, [r4, #12]
 800395e:	4632      	mov	r2, r6
 8003960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	4628      	mov	r0, r5
 8003968:	463b      	mov	r3, r7
 800396a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003972:	f000 b869 	b.w	8003a48 <_write_r>

08003976 <__sseek>:
 8003976:	b510      	push	{r4, lr}
 8003978:	460c      	mov	r4, r1
 800397a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397e:	f000 f9b1 	bl	8003ce4 <_lseek_r>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	bf15      	itete	ne
 8003988:	6560      	strne	r0, [r4, #84]	; 0x54
 800398a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800398e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003992:	81a3      	strheq	r3, [r4, #12]
 8003994:	bf18      	it	ne
 8003996:	81a3      	strhne	r3, [r4, #12]
 8003998:	bd10      	pop	{r4, pc}

0800399a <__sclose>:
 800399a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800399e:	f000 b8d3 	b.w	8003b48 <_close_r>
	...

080039a4 <__swbuf_r>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	460e      	mov	r6, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	4605      	mov	r5, r0
 80039ac:	b118      	cbz	r0, 80039b6 <__swbuf_r+0x12>
 80039ae:	6983      	ldr	r3, [r0, #24]
 80039b0:	b90b      	cbnz	r3, 80039b6 <__swbuf_r+0x12>
 80039b2:	f7ff fb81 	bl	80030b8 <__sinit>
 80039b6:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <__swbuf_r+0x98>)
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d12b      	bne.n	8003a14 <__swbuf_r+0x70>
 80039bc:	686c      	ldr	r4, [r5, #4]
 80039be:	69a3      	ldr	r3, [r4, #24]
 80039c0:	60a3      	str	r3, [r4, #8]
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	071a      	lsls	r2, r3, #28
 80039c6:	d52f      	bpl.n	8003a28 <__swbuf_r+0x84>
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	b36b      	cbz	r3, 8003a28 <__swbuf_r+0x84>
 80039cc:	6923      	ldr	r3, [r4, #16]
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	b2f6      	uxtb	r6, r6
 80039d2:	1ac0      	subs	r0, r0, r3
 80039d4:	6963      	ldr	r3, [r4, #20]
 80039d6:	4637      	mov	r7, r6
 80039d8:	4283      	cmp	r3, r0
 80039da:	dc04      	bgt.n	80039e6 <__swbuf_r+0x42>
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 f944 	bl	8003c6c <_fflush_r>
 80039e4:	bb30      	cbnz	r0, 8003a34 <__swbuf_r+0x90>
 80039e6:	68a3      	ldr	r3, [r4, #8]
 80039e8:	3001      	adds	r0, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	60a3      	str	r3, [r4, #8]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	6022      	str	r2, [r4, #0]
 80039f4:	701e      	strb	r6, [r3, #0]
 80039f6:	6963      	ldr	r3, [r4, #20]
 80039f8:	4283      	cmp	r3, r0
 80039fa:	d004      	beq.n	8003a06 <__swbuf_r+0x62>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	07db      	lsls	r3, r3, #31
 8003a00:	d506      	bpl.n	8003a10 <__swbuf_r+0x6c>
 8003a02:	2e0a      	cmp	r6, #10
 8003a04:	d104      	bne.n	8003a10 <__swbuf_r+0x6c>
 8003a06:	4621      	mov	r1, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 f92f 	bl	8003c6c <_fflush_r>
 8003a0e:	b988      	cbnz	r0, 8003a34 <__swbuf_r+0x90>
 8003a10:	4638      	mov	r0, r7
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a14:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <__swbuf_r+0x9c>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	d101      	bne.n	8003a1e <__swbuf_r+0x7a>
 8003a1a:	68ac      	ldr	r4, [r5, #8]
 8003a1c:	e7cf      	b.n	80039be <__swbuf_r+0x1a>
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <__swbuf_r+0xa0>)
 8003a20:	429c      	cmp	r4, r3
 8003a22:	bf08      	it	eq
 8003a24:	68ec      	ldreq	r4, [r5, #12]
 8003a26:	e7ca      	b.n	80039be <__swbuf_r+0x1a>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f000 f81e 	bl	8003a6c <__swsetup_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d0cb      	beq.n	80039cc <__swbuf_r+0x28>
 8003a34:	f04f 37ff 	mov.w	r7, #4294967295
 8003a38:	e7ea      	b.n	8003a10 <__swbuf_r+0x6c>
 8003a3a:	bf00      	nop
 8003a3c:	08003f6c 	.word	0x08003f6c
 8003a40:	08003f8c 	.word	0x08003f8c
 8003a44:	08003f4c 	.word	0x08003f4c

08003a48 <_write_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	2200      	movs	r2, #0
 8003a52:	4d05      	ldr	r5, [pc, #20]	; (8003a68 <_write_r+0x20>)
 8003a54:	602a      	str	r2, [r5, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f7fc fedf 	bl	800081a <_write>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_write_r+0x1e>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_write_r+0x1e>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	200001b4 	.word	0x200001b4

08003a6c <__swsetup_r>:
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <__swsetup_r+0xcc>)
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	681d      	ldr	r5, [r3, #0]
 8003a72:	4606      	mov	r6, r0
 8003a74:	460c      	mov	r4, r1
 8003a76:	b125      	cbz	r5, 8003a82 <__swsetup_r+0x16>
 8003a78:	69ab      	ldr	r3, [r5, #24]
 8003a7a:	b913      	cbnz	r3, 8003a82 <__swsetup_r+0x16>
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f7ff fb1b 	bl	80030b8 <__sinit>
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <__swsetup_r+0xd0>)
 8003a84:	429c      	cmp	r4, r3
 8003a86:	d10f      	bne.n	8003aa8 <__swsetup_r+0x3c>
 8003a88:	686c      	ldr	r4, [r5, #4]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a90:	0719      	lsls	r1, r3, #28
 8003a92:	d42c      	bmi.n	8003aee <__swsetup_r+0x82>
 8003a94:	06dd      	lsls	r5, r3, #27
 8003a96:	d411      	bmi.n	8003abc <__swsetup_r+0x50>
 8003a98:	2309      	movs	r3, #9
 8003a9a:	6033      	str	r3, [r6, #0]
 8003a9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	e03e      	b.n	8003b26 <__swsetup_r+0xba>
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <__swsetup_r+0xd4>)
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d101      	bne.n	8003ab2 <__swsetup_r+0x46>
 8003aae:	68ac      	ldr	r4, [r5, #8]
 8003ab0:	e7eb      	b.n	8003a8a <__swsetup_r+0x1e>
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <__swsetup_r+0xd8>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	bf08      	it	eq
 8003ab8:	68ec      	ldreq	r4, [r5, #12]
 8003aba:	e7e6      	b.n	8003a8a <__swsetup_r+0x1e>
 8003abc:	0758      	lsls	r0, r3, #29
 8003abe:	d512      	bpl.n	8003ae6 <__swsetup_r+0x7a>
 8003ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac2:	b141      	cbz	r1, 8003ad6 <__swsetup_r+0x6a>
 8003ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	d002      	beq.n	8003ad2 <__swsetup_r+0x66>
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 f99b 	bl	8003e08 <_free_r>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6063      	str	r3, [r4, #4]
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	89a3      	ldrh	r3, [r4, #12]
 8003ae8:	f043 0308 	orr.w	r3, r3, #8
 8003aec:	81a3      	strh	r3, [r4, #12]
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	b94b      	cbnz	r3, 8003b06 <__swsetup_r+0x9a>
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d003      	beq.n	8003b06 <__swsetup_r+0x9a>
 8003afe:	4621      	mov	r1, r4
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f927 	bl	8003d54 <__smakebuf_r>
 8003b06:	89a0      	ldrh	r0, [r4, #12]
 8003b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b0c:	f010 0301 	ands.w	r3, r0, #1
 8003b10:	d00a      	beq.n	8003b28 <__swsetup_r+0xbc>
 8003b12:	2300      	movs	r3, #0
 8003b14:	60a3      	str	r3, [r4, #8]
 8003b16:	6963      	ldr	r3, [r4, #20]
 8003b18:	425b      	negs	r3, r3
 8003b1a:	61a3      	str	r3, [r4, #24]
 8003b1c:	6923      	ldr	r3, [r4, #16]
 8003b1e:	b943      	cbnz	r3, 8003b32 <__swsetup_r+0xc6>
 8003b20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b24:	d1ba      	bne.n	8003a9c <__swsetup_r+0x30>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	0781      	lsls	r1, r0, #30
 8003b2a:	bf58      	it	pl
 8003b2c:	6963      	ldrpl	r3, [r4, #20]
 8003b2e:	60a3      	str	r3, [r4, #8]
 8003b30:	e7f4      	b.n	8003b1c <__swsetup_r+0xb0>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e7f7      	b.n	8003b26 <__swsetup_r+0xba>
 8003b36:	bf00      	nop
 8003b38:	2000000c 	.word	0x2000000c
 8003b3c:	08003f6c 	.word	0x08003f6c
 8003b40:	08003f8c 	.word	0x08003f8c
 8003b44:	08003f4c 	.word	0x08003f4c

08003b48 <_close_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4d05      	ldr	r5, [pc, #20]	; (8003b64 <_close_r+0x1c>)
 8003b4e:	4604      	mov	r4, r0
 8003b50:	4608      	mov	r0, r1
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	f7fc fe7d 	bl	8000852 <_close>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_close_r+0x1a>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_close_r+0x1a>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	200001b4 	.word	0x200001b4

08003b68 <__sflush_r>:
 8003b68:	898a      	ldrh	r2, [r1, #12]
 8003b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	0710      	lsls	r0, r2, #28
 8003b70:	460c      	mov	r4, r1
 8003b72:	d457      	bmi.n	8003c24 <__sflush_r+0xbc>
 8003b74:	684b      	ldr	r3, [r1, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	dc04      	bgt.n	8003b84 <__sflush_r+0x1c>
 8003b7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	dc01      	bgt.n	8003b84 <__sflush_r+0x1c>
 8003b80:	2000      	movs	r0, #0
 8003b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b86:	2e00      	cmp	r6, #0
 8003b88:	d0fa      	beq.n	8003b80 <__sflush_r+0x18>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b90:	682f      	ldr	r7, [r5, #0]
 8003b92:	602b      	str	r3, [r5, #0]
 8003b94:	d032      	beq.n	8003bfc <__sflush_r+0x94>
 8003b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b98:	89a3      	ldrh	r3, [r4, #12]
 8003b9a:	075a      	lsls	r2, r3, #29
 8003b9c:	d505      	bpl.n	8003baa <__sflush_r+0x42>
 8003b9e:	6863      	ldr	r3, [r4, #4]
 8003ba0:	1ac0      	subs	r0, r0, r3
 8003ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ba4:	b10b      	cbz	r3, 8003baa <__sflush_r+0x42>
 8003ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ba8:	1ac0      	subs	r0, r0, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	4602      	mov	r2, r0
 8003bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	6a21      	ldr	r1, [r4, #32]
 8003bb4:	47b0      	blx	r6
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	d106      	bne.n	8003bca <__sflush_r+0x62>
 8003bbc:	6829      	ldr	r1, [r5, #0]
 8003bbe:	291d      	cmp	r1, #29
 8003bc0:	d82c      	bhi.n	8003c1c <__sflush_r+0xb4>
 8003bc2:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <__sflush_r+0x100>)
 8003bc4:	40ca      	lsrs	r2, r1
 8003bc6:	07d6      	lsls	r6, r2, #31
 8003bc8:	d528      	bpl.n	8003c1c <__sflush_r+0xb4>
 8003bca:	2200      	movs	r2, #0
 8003bcc:	6062      	str	r2, [r4, #4]
 8003bce:	6922      	ldr	r2, [r4, #16]
 8003bd0:	04d9      	lsls	r1, r3, #19
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	d504      	bpl.n	8003be0 <__sflush_r+0x78>
 8003bd6:	1c42      	adds	r2, r0, #1
 8003bd8:	d101      	bne.n	8003bde <__sflush_r+0x76>
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	b903      	cbnz	r3, 8003be0 <__sflush_r+0x78>
 8003bde:	6560      	str	r0, [r4, #84]	; 0x54
 8003be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003be2:	602f      	str	r7, [r5, #0]
 8003be4:	2900      	cmp	r1, #0
 8003be6:	d0cb      	beq.n	8003b80 <__sflush_r+0x18>
 8003be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bec:	4299      	cmp	r1, r3
 8003bee:	d002      	beq.n	8003bf6 <__sflush_r+0x8e>
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	f000 f909 	bl	8003e08 <_free_r>
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8003bfa:	e7c2      	b.n	8003b82 <__sflush_r+0x1a>
 8003bfc:	6a21      	ldr	r1, [r4, #32]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4628      	mov	r0, r5
 8003c02:	47b0      	blx	r6
 8003c04:	1c41      	adds	r1, r0, #1
 8003c06:	d1c7      	bne.n	8003b98 <__sflush_r+0x30>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0c4      	beq.n	8003b98 <__sflush_r+0x30>
 8003c0e:	2b1d      	cmp	r3, #29
 8003c10:	d001      	beq.n	8003c16 <__sflush_r+0xae>
 8003c12:	2b16      	cmp	r3, #22
 8003c14:	d101      	bne.n	8003c1a <__sflush_r+0xb2>
 8003c16:	602f      	str	r7, [r5, #0]
 8003c18:	e7b2      	b.n	8003b80 <__sflush_r+0x18>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c20:	81a3      	strh	r3, [r4, #12]
 8003c22:	e7ae      	b.n	8003b82 <__sflush_r+0x1a>
 8003c24:	690f      	ldr	r7, [r1, #16]
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	d0aa      	beq.n	8003b80 <__sflush_r+0x18>
 8003c2a:	0793      	lsls	r3, r2, #30
 8003c2c:	bf18      	it	ne
 8003c2e:	2300      	movne	r3, #0
 8003c30:	680e      	ldr	r6, [r1, #0]
 8003c32:	bf08      	it	eq
 8003c34:	694b      	ldreq	r3, [r1, #20]
 8003c36:	1bf6      	subs	r6, r6, r7
 8003c38:	600f      	str	r7, [r1, #0]
 8003c3a:	608b      	str	r3, [r1, #8]
 8003c3c:	2e00      	cmp	r6, #0
 8003c3e:	dd9f      	ble.n	8003b80 <__sflush_r+0x18>
 8003c40:	4633      	mov	r3, r6
 8003c42:	463a      	mov	r2, r7
 8003c44:	4628      	mov	r0, r5
 8003c46:	6a21      	ldr	r1, [r4, #32]
 8003c48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003c4c:	47e0      	blx	ip
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	dc06      	bgt.n	8003c60 <__sflush_r+0xf8>
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	e790      	b.n	8003b82 <__sflush_r+0x1a>
 8003c60:	4407      	add	r7, r0
 8003c62:	1a36      	subs	r6, r6, r0
 8003c64:	e7ea      	b.n	8003c3c <__sflush_r+0xd4>
 8003c66:	bf00      	nop
 8003c68:	20400001 	.word	0x20400001

08003c6c <_fflush_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	690b      	ldr	r3, [r1, #16]
 8003c70:	4605      	mov	r5, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	b913      	cbnz	r3, 8003c7c <_fflush_r+0x10>
 8003c76:	2500      	movs	r5, #0
 8003c78:	4628      	mov	r0, r5
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	b118      	cbz	r0, 8003c86 <_fflush_r+0x1a>
 8003c7e:	6983      	ldr	r3, [r0, #24]
 8003c80:	b90b      	cbnz	r3, 8003c86 <_fflush_r+0x1a>
 8003c82:	f7ff fa19 	bl	80030b8 <__sinit>
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <_fflush_r+0x6c>)
 8003c88:	429c      	cmp	r4, r3
 8003c8a:	d11b      	bne.n	8003cc4 <_fflush_r+0x58>
 8003c8c:	686c      	ldr	r4, [r5, #4]
 8003c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ef      	beq.n	8003c76 <_fflush_r+0xa>
 8003c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c98:	07d0      	lsls	r0, r2, #31
 8003c9a:	d404      	bmi.n	8003ca6 <_fflush_r+0x3a>
 8003c9c:	0599      	lsls	r1, r3, #22
 8003c9e:	d402      	bmi.n	8003ca6 <_fflush_r+0x3a>
 8003ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca2:	f7ff faa7 	bl	80031f4 <__retarget_lock_acquire_recursive>
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	4621      	mov	r1, r4
 8003caa:	f7ff ff5d 	bl	8003b68 <__sflush_r>
 8003cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	07da      	lsls	r2, r3, #31
 8003cb4:	d4e0      	bmi.n	8003c78 <_fflush_r+0xc>
 8003cb6:	89a3      	ldrh	r3, [r4, #12]
 8003cb8:	059b      	lsls	r3, r3, #22
 8003cba:	d4dd      	bmi.n	8003c78 <_fflush_r+0xc>
 8003cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cbe:	f7ff fa9a 	bl	80031f6 <__retarget_lock_release_recursive>
 8003cc2:	e7d9      	b.n	8003c78 <_fflush_r+0xc>
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <_fflush_r+0x70>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d101      	bne.n	8003cce <_fflush_r+0x62>
 8003cca:	68ac      	ldr	r4, [r5, #8]
 8003ccc:	e7df      	b.n	8003c8e <_fflush_r+0x22>
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <_fflush_r+0x74>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	bf08      	it	eq
 8003cd4:	68ec      	ldreq	r4, [r5, #12]
 8003cd6:	e7da      	b.n	8003c8e <_fflush_r+0x22>
 8003cd8:	08003f6c 	.word	0x08003f6c
 8003cdc:	08003f8c 	.word	0x08003f8c
 8003ce0:	08003f4c 	.word	0x08003f4c

08003ce4 <_lseek_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	2200      	movs	r2, #0
 8003cee:	4d05      	ldr	r5, [pc, #20]	; (8003d04 <_lseek_r+0x20>)
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fc fdd1 	bl	800089a <_lseek>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_lseek_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_lseek_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	200001b4 	.word	0x200001b4

08003d08 <__swhatbuf_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d10:	4614      	mov	r4, r2
 8003d12:	2900      	cmp	r1, #0
 8003d14:	461d      	mov	r5, r3
 8003d16:	b096      	sub	sp, #88	; 0x58
 8003d18:	da08      	bge.n	8003d2c <__swhatbuf_r+0x24>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003d20:	602a      	str	r2, [r5, #0]
 8003d22:	061a      	lsls	r2, r3, #24
 8003d24:	d410      	bmi.n	8003d48 <__swhatbuf_r+0x40>
 8003d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2a:	e00e      	b.n	8003d4a <__swhatbuf_r+0x42>
 8003d2c:	466a      	mov	r2, sp
 8003d2e:	f000 f8c5 	bl	8003ebc <_fstat_r>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	dbf1      	blt.n	8003d1a <__swhatbuf_r+0x12>
 8003d36:	9a01      	ldr	r2, [sp, #4]
 8003d38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d40:	425a      	negs	r2, r3
 8003d42:	415a      	adcs	r2, r3
 8003d44:	602a      	str	r2, [r5, #0]
 8003d46:	e7ee      	b.n	8003d26 <__swhatbuf_r+0x1e>
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	b016      	add	sp, #88	; 0x58
 8003d50:	bd70      	pop	{r4, r5, r6, pc}
	...

08003d54 <__smakebuf_r>:
 8003d54:	898b      	ldrh	r3, [r1, #12]
 8003d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d58:	079d      	lsls	r5, r3, #30
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	d507      	bpl.n	8003d70 <__smakebuf_r+0x1c>
 8003d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	6123      	str	r3, [r4, #16]
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6163      	str	r3, [r4, #20]
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	466a      	mov	r2, sp
 8003d72:	ab01      	add	r3, sp, #4
 8003d74:	f7ff ffc8 	bl	8003d08 <__swhatbuf_r>
 8003d78:	9900      	ldr	r1, [sp, #0]
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7ff fa5b 	bl	8003238 <_malloc_r>
 8003d82:	b948      	cbnz	r0, 8003d98 <__smakebuf_r+0x44>
 8003d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d88:	059a      	lsls	r2, r3, #22
 8003d8a:	d4ef      	bmi.n	8003d6c <__smakebuf_r+0x18>
 8003d8c:	f023 0303 	bic.w	r3, r3, #3
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	e7e3      	b.n	8003d60 <__smakebuf_r+0xc>
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <__smakebuf_r+0x7c>)
 8003d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	9b00      	ldr	r3, [sp, #0]
 8003da8:	6120      	str	r0, [r4, #16]
 8003daa:	6163      	str	r3, [r4, #20]
 8003dac:	9b01      	ldr	r3, [sp, #4]
 8003dae:	b15b      	cbz	r3, 8003dc8 <__smakebuf_r+0x74>
 8003db0:	4630      	mov	r0, r6
 8003db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db6:	f000 f893 	bl	8003ee0 <_isatty_r>
 8003dba:	b128      	cbz	r0, 8003dc8 <__smakebuf_r+0x74>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	89a0      	ldrh	r0, [r4, #12]
 8003dca:	4305      	orrs	r5, r0
 8003dcc:	81a5      	strh	r5, [r4, #12]
 8003dce:	e7cd      	b.n	8003d6c <__smakebuf_r+0x18>
 8003dd0:	08003051 	.word	0x08003051

08003dd4 <memchr>:
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	b2c9      	uxtb	r1, r1
 8003dda:	4402      	add	r2, r0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	d101      	bne.n	8003de6 <memchr+0x12>
 8003de2:	2000      	movs	r0, #0
 8003de4:	e003      	b.n	8003dee <memchr+0x1a>
 8003de6:	7804      	ldrb	r4, [r0, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	428c      	cmp	r4, r1
 8003dec:	d1f6      	bne.n	8003ddc <memchr+0x8>
 8003dee:	bd10      	pop	{r4, pc}

08003df0 <__malloc_lock>:
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <__malloc_lock+0x8>)
 8003df2:	f7ff b9ff 	b.w	80031f4 <__retarget_lock_acquire_recursive>
 8003df6:	bf00      	nop
 8003df8:	200001a8 	.word	0x200001a8

08003dfc <__malloc_unlock>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <__malloc_unlock+0x8>)
 8003dfe:	f7ff b9fa 	b.w	80031f6 <__retarget_lock_release_recursive>
 8003e02:	bf00      	nop
 8003e04:	200001a8 	.word	0x200001a8

08003e08 <_free_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	d040      	beq.n	8003e92 <_free_r+0x8a>
 8003e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e14:	1f0c      	subs	r4, r1, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfb8      	it	lt
 8003e1a:	18e4      	addlt	r4, r4, r3
 8003e1c:	f7ff ffe8 	bl	8003df0 <__malloc_lock>
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <_free_r+0x8c>)
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	b933      	cbnz	r3, 8003e34 <_free_r+0x2c>
 8003e26:	6063      	str	r3, [r4, #4]
 8003e28:	6014      	str	r4, [r2, #0]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e30:	f7ff bfe4 	b.w	8003dfc <__malloc_unlock>
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d908      	bls.n	8003e4a <_free_r+0x42>
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	1821      	adds	r1, r4, r0
 8003e3c:	428b      	cmp	r3, r1
 8003e3e:	bf01      	itttt	eq
 8003e40:	6819      	ldreq	r1, [r3, #0]
 8003e42:	685b      	ldreq	r3, [r3, #4]
 8003e44:	1809      	addeq	r1, r1, r0
 8003e46:	6021      	streq	r1, [r4, #0]
 8003e48:	e7ed      	b.n	8003e26 <_free_r+0x1e>
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b10b      	cbz	r3, 8003e54 <_free_r+0x4c>
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	d9fa      	bls.n	8003e4a <_free_r+0x42>
 8003e54:	6811      	ldr	r1, [r2, #0]
 8003e56:	1850      	adds	r0, r2, r1
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d10b      	bne.n	8003e74 <_free_r+0x6c>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	4401      	add	r1, r0
 8003e60:	1850      	adds	r0, r2, r1
 8003e62:	4283      	cmp	r3, r0
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	d1e0      	bne.n	8003e2a <_free_r+0x22>
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4401      	add	r1, r0
 8003e6e:	6011      	str	r1, [r2, #0]
 8003e70:	6053      	str	r3, [r2, #4]
 8003e72:	e7da      	b.n	8003e2a <_free_r+0x22>
 8003e74:	d902      	bls.n	8003e7c <_free_r+0x74>
 8003e76:	230c      	movs	r3, #12
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	e7d6      	b.n	8003e2a <_free_r+0x22>
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	1821      	adds	r1, r4, r0
 8003e80:	428b      	cmp	r3, r1
 8003e82:	bf01      	itttt	eq
 8003e84:	6819      	ldreq	r1, [r3, #0]
 8003e86:	685b      	ldreq	r3, [r3, #4]
 8003e88:	1809      	addeq	r1, r1, r0
 8003e8a:	6021      	streq	r1, [r4, #0]
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6054      	str	r4, [r2, #4]
 8003e90:	e7cb      	b.n	8003e2a <_free_r+0x22>
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	200001ac 	.word	0x200001ac

08003e98 <_read_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4d05      	ldr	r5, [pc, #20]	; (8003eb8 <_read_r+0x20>)
 8003ea4:	602a      	str	r2, [r5, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f7fc fc9a 	bl	80007e0 <_read>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d102      	bne.n	8003eb6 <_read_r+0x1e>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	b103      	cbz	r3, 8003eb6 <_read_r+0x1e>
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	200001b4 	.word	0x200001b4

08003ebc <_fstat_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4d06      	ldr	r5, [pc, #24]	; (8003edc <_fstat_r+0x20>)
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	f7fc fccd 	bl	8000868 <_fstat>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d102      	bne.n	8003ed8 <_fstat_r+0x1c>
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	b103      	cbz	r3, 8003ed8 <_fstat_r+0x1c>
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	200001b4 	.word	0x200001b4

08003ee0 <_isatty_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	4d05      	ldr	r5, [pc, #20]	; (8003efc <_isatty_r+0x1c>)
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	f7fc fccb 	bl	8000886 <_isatty>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_isatty_r+0x1a>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_isatty_r+0x1a>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	200001b4 	.word	0x200001b4

08003f00 <_init>:
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	bf00      	nop
 8003f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f06:	bc08      	pop	{r3}
 8003f08:	469e      	mov	lr, r3
 8003f0a:	4770      	bx	lr

08003f0c <_fini>:
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0e:	bf00      	nop
 8003f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f12:	bc08      	pop	{r3}
 8003f14:	469e      	mov	lr, r3
 8003f16:	4770      	bx	lr
